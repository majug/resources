%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: majug-logo-var Kopie.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Oliver Gierke
%%CreationDate: 2/9/10
%%BoundingBox: 0 0 329 277
%%HiResBoundingBox: 0 0 328.6943 276.2114
%%CropBox: 0 0 328.6943 276.2114
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.2%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.2 x434 R agm 4.4379 ct 5.1039%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">majug-logo-var</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2010-02-09T21:02:58+01:00</xap:CreateDate>
         <xap:ModifyDate>2010-02-09T21:02:58+01:00</xap:ModifyDate>
         <xap:MetadataDate>2010-02-09T21:02:58+01:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>216</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA2AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYqlvmSaW&#xA;HQ7qSJ2jkVRxdCVYfEOhGant3JKGjySiTGQA3Gx5hXnn6Z1j/luuP+Rr/wBc8v8A5U1X+q5P9PL9&#xA;aXfpnWP+W64/5Gv/AFx/lTVf6rk/08v1q79M6x/y3XH/ACNf+uP8qar/AFXJ/p5frV36Z1j/AJbr&#xA;j/ka/wDXH+VNV/quT/Ty/Wrv0zrH/Ldcf8jX/rj/ACpqv9Vyf6eX61Zx5Mubi40gyXErzP6rDnIx&#xA;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&#xA;rsVdirsVdir/AP/Z</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:8B171BCA5017DF118869BC525617D55A</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:8C171BCA5017DF118869BC525617D55A</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:19d32235-a1a8-844a-a843-43e958b296de</stRef:instanceID>
            <stRef:documentID>uuid:42D255A64C17DF119CC383A63BEC0B06</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>279.400000</stDim:w>
            <stDim:h>215.900000</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>MyriadPro-Bold</stFnt:fontName>
                  <stFnt:fontFamily>Myriad Pro</stFnt:fontFamily>
                  <stFnt:fontFace>Bold</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 2.007;PS 002.000;Core 1.0.38;makeotf.lib1.7.9032</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>MyriadPro-Bold.otf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xapTPg:Fonts>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Standard-Farbfeldgruppe</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
                  <xapG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=7 G=49 B=64</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>7</xapG:red>
                           <xapG:green>49</xapG:green>
                           <xapG:blue>64</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=34 M=0 Y=96 K=0</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>191</xapG:red>
                           <xapG:green>207</xapG:green>
                           <xapG:blue>12</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=255 G=255 B=255</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>255</xapG:red>
                           <xapG:green>255</xapG:green>
                           <xapG:blue>255</xapG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xapG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -276.211 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 276.211 li
328.694 276.211 li
328.694 0 li
cp
clp
[1 0 0 1 0 0 ]ct
116.394 58.5088 mo
59.4404 58.5088 li
59.4404 1.55615 li
116.394 1.55615 li
116.394 58.5088 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0.341176 0.00392157 0.964706 0 cmyk
f
247.189 58.5088 mo
190.236 58.5088 li
190.236 1.55615 li
247.189 1.55615 li
247.189 58.5088 li
cp
0.929412 0.694118 0.490196 0.517647 cmyk
f
181.596 58.5088 mo
124.642 58.5088 li
124.642 1.55615 li
181.596 1.55615 li
181.596 58.5088 li
cp
0.341176 0.00392157 0.964706 0 cmyk
f
116.777 124.958 mo
59.8242 124.958 li
59.8242 68.0044 li
116.777 68.0044 li
116.777 124.958 li
cp
f
247.573 124.958 mo
190.62 124.958 li
190.62 68.0044 li
247.573 68.0044 li
247.573 124.958 li
cp
0.929412 0.694118 0.490196 0.517647 cmyk
f
181.979 124.958 mo
125.025 124.958 li
125.025 68.0044 li
181.979 68.0044 li
181.979 124.958 li
cp
0.341176 0.00392157 0.964706 0 cmyk
f
116.786 192.054 mo
59.833 192.054 li
59.833 135.101 li
116.786 135.101 li
116.786 192.054 li
cp
f
247.582 192.054 mo
190.629 192.054 li
190.629 135.101 li
247.582 135.101 li
247.582 192.054 li
cp
0.929412 0.694118 0.490196 0.517647 cmyk
f
181.988 192.054 mo
125.035 192.054 li
125.035 135.101 li
181.988 135.101 li
181.988 192.054 li
cp
0.341176 0.00392157 0.964706 0 cmyk
f
152.485 78.8911 mo
152.485 78.8911 li
152.43 79.4287 li
152.345 79.9653 li
152.203 80.5034 li
152.033 81.0122 li
151.807 81.4932 li
151.581 81.9731 li
151.298 82.4263 li
151.015 82.8784 li
150.675 83.2749 li
150.308 83.6709 li
149.941 84.0386 li
149.544 84.377 li
149.148 84.688 li
148.725 84.9707 li
148.272 85.2261 li
147.819 85.4526 li
147.367 85.6221 li
146.915 85.7915 li
146.434 85.9048 li
145.981 85.9897 li
145.5 86.0464 li
145.048 86.0464 li
144.567 86.0171 li
144.143 85.9326 li
143.69 85.7915 li
143.266 85.6504 li
142.842 85.4233 li
142.446 85.1689 li
142.078 84.8584 li
141.711 84.4902 li
141.399 84.0952 li
141.089 83.6133 li
141.004 83.6709 li
141.315 84.1226 li
141.654 84.5474 li
142.022 84.915 li
142.418 85.2261 li
142.814 85.5088 li
143.238 85.707 li
143.662 85.8765 li
144.115 86.0171 li
144.567 86.1021 li
145.048 86.1313 li
145.5 86.1313 li
145.981 86.0747 li
146.462 85.9897 li
146.915 85.8765 li
147.395 85.707 li
147.848 85.5371 li
148.3 85.311 li
148.753 85.0566 li
149.177 84.7446 li
149.601 84.4341 li
149.997 84.0952 li
150.393 83.7275 li
150.732 83.3315 li
151.072 82.9072 li
151.383 82.4824 li
151.665 82.0308 li
151.892 81.5498 li
152.118 81.04 li
152.288 80.5308 li
152.43 79.9937 li
152.514 79.457 li
152.57 78.8911 li
152.57 78.8911 li
152.485 78.8911 li
cp
0.858823 0.85098 0.788235 1 cmyk
ef
148.131 65.1753 mo
148.131 65.1753 li
148.47 65.2036 li
148.81 65.2886 li
149.12 65.4297 li
149.403 65.5708 li
149.686 65.769 li
149.969 66.0229 li
150.223 66.2778 li
150.449 66.5894 li
150.675 66.9004 li
150.901 67.2681 li
151.1 67.6353 li
151.27 68.0322 li
151.439 68.4839 li
151.581 68.9365 li
151.722 69.3892 li
151.863 69.8696 li
151.977 70.3784 li
152.09 70.916 li
152.175 71.4531 li
152.26 71.9912 li
152.345 72.5562 li
152.401 73.1226 li
152.457 73.688 li
152.485 74.2529 li
152.514 74.8467 li
152.542 75.4409 li
152.542 76.0063 li
152.542 76.6001 li
152.542 77.1655 li
152.542 77.7598 li
152.514 78.3257 li
152.485 78.8911 li
152.57 78.8911 li
152.599 78.3257 li
152.627 77.7598 li
152.627 77.1655 li
152.655 76.6001 li
152.627 76.0063 li
152.627 75.4131 li
152.599 74.8467 li
152.57 74.2529 li
152.542 73.688 li
152.485 73.0933 li
152.43 72.5288 li
152.345 71.9912 li
152.26 71.4253 li
152.175 70.8877 li
152.062 70.3784 li
151.948 69.8696 li
151.807 69.3608 li
151.665 68.9082 li
151.524 68.4556 li
151.354 68.0034 li
151.156 67.6069 li
150.958 67.2114 li
150.761 66.8438 li
150.534 66.5327 li
150.28 66.2217 li
150.025 65.939 li
149.742 65.7124 li
149.459 65.5146 li
149.148 65.3452 li
148.838 65.2036 li
148.47 65.1187 li
148.131 65.062 li
148.131 65.062 li
148.131 65.1753 li
cp
ef
137.61 60.707 mo
137.61 60.707 li
137.949 60.7637 li
138.317 60.8198 li
138.657 60.8765 li
138.996 60.9897 li
139.336 61.0747 li
139.675 61.2163 li
139.986 61.3291 li
140.325 61.4985 li
140.636 61.6401 li
140.947 61.8101 li
141.287 61.9795 li
141.598 62.1772 li
141.909 62.3472 li
142.22 62.5454 li
142.531 62.7432 li
142.842 62.9409 li
143.153 63.1392 li
143.464 63.3091 li
143.775 63.5068 li
144.086 63.7046 li
144.397 63.8745 li
144.736 64.0439 li
145.048 64.2134 li
145.359 64.3833 li
145.698 64.5249 li
146.038 64.667 li
146.377 64.7793 li
146.717 64.8921 li
147.056 65.0054 li
147.395 65.062 li
147.763 65.1187 li
148.131 65.1753 li
148.131 65.062 li
147.763 65.0337 li
147.423 64.9771 li
147.056 64.9204 li
146.717 64.8076 li
146.377 64.7227 li
146.066 64.5815 li
145.727 64.4399 li
145.415 64.2983 li
145.076 64.1572 li
144.765 63.9878 li
144.454 63.8179 li
144.143 63.6196 li
143.832 63.4502 li
143.521 63.2524 li
143.182 63.0542 li
142.871 62.856 li
142.559 62.6582 li
142.248 62.4604 li
141.938 62.2905 li
141.626 62.0928 li
141.315 61.9233 li
141.004 61.7251 li
140.665 61.5552 li
140.354 61.4141 li
140.014 61.2729 li
139.703 61.1313 li
139.363 60.9897 li
139.024 60.9048 li
138.685 60.792 li
138.317 60.7354 li
137.979 60.6787 li
137.61 60.6221 li
137.61 60.6221 li
137.61 60.707 li
cp
ef
127.712 59.1235 mo
127.712 59.1235 li
127.882 59.604 li
128.08 60 li
128.277 60.3677 li
128.504 60.6787 li
128.73 60.9614 li
128.985 61.188 li
129.239 61.3857 li
129.494 61.5269 li
129.777 61.6685 li
130.059 61.7534 li
130.342 61.8101 li
130.653 61.8384 li
130.965 61.8667 li
131.275 61.8384 li
131.587 61.8101 li
131.926 61.7534 li
132.237 61.6968 li
132.576 61.6401 li
132.916 61.5552 li
133.283 61.4707 li
133.623 61.3574 li
133.99 61.2729 li
134.33 61.1597 li
134.697 61.0747 li
135.065 60.9897 li
135.404 60.9048 li
135.772 60.8481 li
136.14 60.792 li
136.507 60.7354 li
136.875 60.707 li
137.243 60.707 li
137.61 60.707 li
137.61 60.6221 li
137.243 60.6221 li
136.875 60.6221 li
136.507 60.6504 li
136.14 60.707 li
135.772 60.7637 li
135.404 60.8198 li
135.037 60.9048 li
134.669 60.9897 li
134.301 61.103 li
133.962 61.188 li
133.595 61.2729 li
133.255 61.3857 li
132.916 61.4707 li
132.576 61.5552 li
132.237 61.6118 li
131.897 61.6685 li
131.587 61.7251 li
131.247 61.7534 li
130.965 61.7817 li
130.653 61.7534 li
130.371 61.7251 li
130.087 61.6685 li
129.805 61.5835 li
129.522 61.4707 li
129.268 61.3008 li
129.041 61.1313 li
128.787 60.9048 li
128.589 60.6221 li
128.362 60.311 li
128.165 59.9717 li
127.967 59.5474 li
127.797 59.0952 li
127.797 59.0952 li
127.712 59.1235 li
cp
ef
137.582 51.0073 mo
137.582 50.9224 li
137.129 51.0073 li
136.648 51.0923 li
136.168 51.2051 li
135.658 51.3184 li
135.179 51.4307 li
134.669 51.5435 li
134.188 51.6851 li
133.708 51.8267 li
133.199 51.9971 li
132.746 52.1382 li
132.266 52.3364 li
131.813 52.5054 li
131.36 52.7031 li
130.936 52.9302 li
130.512 53.1558 li
130.116 53.3823 li
129.72 53.6372 li
129.381 53.8916 li
129.041 54.1743 li
128.73 54.4575 li
128.447 54.7681 li
128.193 55.0796 li
127.995 55.4185 li
127.797 55.7866 li
127.655 56.1255 li
127.514 56.522 li
127.458 56.9175 li
127.401 57.3135 li
127.43 57.7651 li
127.486 58.1899 li
127.57 58.6709 li
127.712 59.1235 li
127.797 59.0952 li
127.655 58.6421 li
127.57 58.1899 li
127.514 57.7378 li
127.514 57.3418 li
127.543 56.9175 li
127.599 56.5498 li
127.712 56.1533 li
127.882 55.8149 li
128.052 55.4746 li
128.277 55.1362 li
128.532 54.8247 li
128.787 54.542 li
129.098 54.231 li
129.437 53.9766 li
129.777 53.7222 li
130.144 53.4668 li
130.54 53.2407 li
130.965 53.0151 li
131.389 52.7881 li
131.841 52.5908 li
132.293 52.4214 li
132.774 52.2222 li
133.227 52.0815 li
133.735 51.9121 li
134.217 51.771 li
134.697 51.6284 li
135.207 51.5161 li
135.688 51.4028 li
136.168 51.29 li
136.648 51.1768 li
137.129 51.0923 li
137.61 51.0356 li
137.639 50.9497 li
137.582 51.0073 li
cp
ef
128.561 36.499 mo
128.561 36.499 li
128.758 36.98 li
128.928 37.4614 li
129.126 37.9409 li
129.324 38.4229 li
129.522 38.9028 li
129.749 39.3843 li
129.946 39.8359 li
130.173 40.3169 li
130.399 40.769 li
130.625 41.25 li
130.852 41.7031 li
131.106 42.1831 li
131.36 42.6362 li
131.614 43.0884 li
131.869 43.5688 li
132.124 44.0215 li
132.406 44.4746 li
132.689 44.9263 li
132.972 45.3794 li
133.283 45.8315 li
133.595 46.2554 li
133.905 46.708 li
134.217 47.1611 li
134.556 47.5845 li
134.896 48.0376 li
135.263 48.4614 li
135.631 48.8862 li
135.998 49.3101 li
136.366 49.7349 li
136.762 50.1587 li
137.158 50.583 li
137.582 51.0073 li
137.639 50.9497 li
137.214 50.5264 li
136.818 50.1016 li
136.422 49.6782 li
136.055 49.2539 li
135.688 48.8286 li
135.319 48.4058 li
134.979 47.9805 li
134.641 47.5288 li
134.301 47.104 li
133.962 46.6514 li
133.65 46.228 li
133.34 45.7749 li
133.057 45.3228 li
132.774 44.8706 li
132.491 44.4175 li
132.208 43.9648 li
131.926 43.5132 li
131.672 43.0605 li
131.417 42.6074 li
131.19 42.1265 li
130.936 41.6743 li
130.71 41.2222 li
130.483 40.7417 li
130.258 40.2886 li
130.031 39.8076 li
129.833 39.3267 li
129.606 38.8745 li
129.409 38.394 li
129.211 37.9131 li
129.013 37.4321 li
128.843 36.9517 li
128.646 36.4707 li
128.646 36.4707 li
128.561 36.499 li
cp
ef
130.653 24.6499 mo
130.653 24.6499 li
130.173 24.8477 li
129.72 25.0459 li
129.296 25.272 li
128.9 25.5264 li
128.561 25.7808 li
128.249 26.0356 li
127.995 26.3184 li
127.741 26.6294 li
127.514 26.9404 li
127.345 27.2515 li
127.203 27.5908 li
127.062 27.9302 li
126.977 28.2979 li
126.892 28.6655 li
126.835 29.0332 li
126.808 29.4292 li
126.808 29.8247 li
126.835 30.2212 li
126.864 30.6167 li
126.92 31.041 li
127.005 31.4653 li
127.09 31.8892 li
127.175 32.3418 li
127.288 32.7944 li
127.43 33.2466 li
127.57 33.6992 li
127.712 34.1519 li
127.882 34.604 li
128.023 35.085 li
128.222 35.5659 li
128.391 36.0464 li
128.561 36.499 li
128.646 36.4707 li
128.476 35.9897 li
128.277 35.5376 li
128.108 35.0566 li
127.938 34.5757 li
127.797 34.1235 li
127.655 33.6709 li
127.514 33.2183 li
127.373 32.7661 li
127.26 32.3135 li
127.175 31.8892 li
127.09 31.4653 li
127.005 31.041 li
126.949 30.6167 li
126.92 30.2212 li
126.892 29.8247 li
126.892 29.4292 li
126.92 29.0332 li
126.977 28.6655 li
127.062 28.3262 li
127.146 27.9585 li
127.26 27.6191 li
127.43 27.3081 li
127.599 26.9688 li
127.797 26.686 li
128.052 26.375 li
128.306 26.1206 li
128.617 25.8374 li
128.956 25.583 li
129.324 25.3569 li
129.749 25.1304 li
130.201 24.9038 li
130.682 24.7065 li
130.682 24.7065 li
130.653 24.6499 li
cp
ef
141.88 37.7153 mo
141.965 37.687 li
141.399 37.2344 li
140.862 36.7251 li
140.354 36.2163 li
139.901 35.6792 li
139.477 35.1416 li
139.081 34.5474 li
138.685 33.9819 li
138.346 33.3882 li
138.006 32.7661 li
137.695 32.1724 li
137.384 31.5786 li
137.102 30.9561 li
136.818 30.3623 li
136.564 29.7686 li
136.31 29.2026 li
136.055 28.6655 li
135.8 28.1284 li
135.545 27.5908 li
135.291 27.1099 li
135.009 26.6577 li
134.754 26.2334 li
134.471 25.8374 li
134.188 25.4702 li
133.877 25.1582 li
133.566 24.9038 li
133.227 24.6782 li
132.859 24.5366 li
132.463 24.4233 li
132.067 24.3672 li
131.614 24.395 li
131.162 24.48 li
130.653 24.6499 li
130.682 24.7065 li
131.19 24.5649 li
131.644 24.48 li
132.067 24.4517 li
132.463 24.5083 li
132.831 24.6216 li
133.17 24.7632 li
133.51 24.9893 li
133.82 25.2437 li
134.132 25.5264 li
134.414 25.894 li
134.669 26.2617 li
134.952 26.686 li
135.207 27.1382 li
135.461 27.6475 li
135.716 28.1567 li
135.97 28.6938 li
136.224 29.231 li
136.479 29.8247 li
136.733 30.3906 li
137.017 31.0127 li
137.3 31.6069 li
137.61 32.2007 li
137.921 32.8228 li
138.261 33.4165 li
138.628 34.0103 li
138.996 34.604 li
139.392 35.1699 li
139.844 35.7354 li
140.297 36.2729 li
140.806 36.8101 li
141.344 37.2905 li
141.909 37.7432 li
141.965 37.7153 li
141.88 37.7153 li
cp
ef
139.505 23.8296 mo
139.505 23.8296 li
139.505 24.1973 li
139.505 24.5649 li
139.505 24.9326 li
139.505 25.3003 li
139.505 25.668 li
139.534 26.0073 li
139.534 26.375 li
139.562 26.7427 li
139.59 27.082 li
139.618 27.4497 li
139.675 27.8169 li
139.703 28.1567 li
139.76 28.5522 li
139.816 28.9199 li
139.873 29.2876 li
139.958 29.6836 li
140.042 30.0796 li
140.099 30.5034 li
140.184 30.8999 li
140.297 31.3521 li
140.382 31.7764 li
140.495 32.229 li
140.608 32.7095 li
140.721 33.1904 li
140.834 33.6992 li
140.976 34.2085 li
141.117 34.7456 li
141.259 35.2827 li
141.399 35.877 li
141.541 36.4707 li
141.711 37.0928 li
141.88 37.7153 li
141.965 37.7153 li
141.796 37.0645 li
141.626 36.4424 li
141.484 35.8486 li
141.344 35.2827 li
141.202 34.7173 li
141.061 34.1802 li
140.919 33.6709 li
140.806 33.1621 li
140.692 32.6812 li
140.58 32.229 li
140.467 31.748 li
140.382 31.3237 li
140.269 30.8999 li
140.184 30.4756 li
140.127 30.0796 li
140.042 29.6836 li
139.958 29.2876 li
139.901 28.8921 li
139.844 28.5239 li
139.788 28.1567 li
139.76 27.7886 li
139.703 27.4497 li
139.675 27.082 li
139.646 26.7144 li
139.618 26.375 li
139.618 26.0073 li
139.59 25.668 li
139.59 25.3003 li
139.59 24.9326 li
139.59 24.5649 li
139.59 24.1973 li
139.59 23.8296 li
139.59 23.8296 li
139.505 23.8296 li
cp
ef
145.161 17.4385 mo
145.161 17.4385 li
144.624 17.3823 li
144.143 17.354 li
143.69 17.3247 li
143.266 17.3247 li
142.871 17.354 li
142.503 17.3823 li
142.163 17.4668 li
141.852 17.5518 li
141.569 17.6362 li
141.315 17.7495 li
141.089 17.8901 li
140.862 18.061 li
140.665 18.2305 li
140.495 18.3999 li
140.354 18.5981 li
140.212 18.8237 li
140.099 19.0498 li
139.986 19.3052 li
139.901 19.5596 li
139.844 19.813 li
139.76 20.0962 li
139.703 20.4077 li
139.675 20.6909 li
139.646 21.0298 li
139.618 21.3413 li
139.59 21.6802 li
139.562 22.02 li
139.562 22.3589 li
139.534 22.7271 li
139.534 23.0942 li
139.534 23.4624 li
139.505 23.8296 li
139.59 23.8296 li
139.618 23.4624 li
139.618 23.0942 li
139.618 22.7271 li
139.646 22.3589 li
139.646 22.02 li
139.675 21.6802 li
139.703 21.3413 li
139.731 21.0298 li
139.76 20.7192 li
139.788 20.4077 li
139.844 20.125 li
139.929 19.8423 li
139.986 19.5879 li
140.071 19.3335 li
140.184 19.1069 li
140.297 18.8809 li
140.41 18.6548 li
140.58 18.4565 li
140.75 18.2861 li
140.919 18.1172 li
141.117 17.9761 li
141.371 17.8345 li
141.598 17.7212 li
141.88 17.6079 li
142.192 17.5518 li
142.531 17.4668 li
142.871 17.4385 li
143.266 17.4097 li
143.69 17.4097 li
144.143 17.4385 li
144.624 17.4668 li
145.133 17.5229 li
145.133 17.5229 li
145.161 17.4385 li
cp
ef
152.825 35.0566 mo
152.909 35.0566 li
152.514 34.5757 li
152.146 34.0669 li
151.835 33.5298 li
151.524 32.936 li
151.27 32.3418 li
151.043 31.7197 li
150.817 31.041 li
150.619 30.3906 li
150.449 29.6836 li
150.308 29.0049 li
150.167 28.2979 li
150.025 27.5908 li
149.884 26.856 li
149.771 26.1489 li
149.658 25.4419 li
149.544 24.7632 li
149.403 24.0562 li
149.262 23.4058 li
149.12 22.7554 li
148.979 22.105 li
148.81 21.5107 li
148.64 20.917 li
148.413 20.3789 li
148.187 19.8706 li
147.933 19.3901 li
147.65 18.9653 li
147.339 18.5688 li
146.971 18.2305 li
146.575 17.9478 li
146.151 17.7212 li
145.67 17.5518 li
145.161 17.4385 li
145.133 17.5229 li
145.642 17.6362 li
146.123 17.8062 li
146.547 18.0327 li
146.915 18.3149 li
147.254 18.6548 li
147.565 19.022 li
147.848 19.4463 li
148.102 19.8989 li
148.329 20.4077 li
148.555 20.9453 li
148.725 21.5386 li
148.895 22.1333 li
149.063 22.7554 li
149.177 23.4058 li
149.318 24.0845 li
149.459 24.7632 li
149.573 25.4702 li
149.686 26.1772 li
149.799 26.8838 li
149.941 27.5908 li
150.082 28.2979 li
150.223 29.0049 li
150.365 29.7119 li
150.534 30.4189 li
150.732 31.0693 li
150.958 31.748 li
151.185 32.3701 li
151.467 32.9922 li
151.75 33.5581 li
152.09 34.1235 li
152.43 34.6323 li
152.854 35.1133 li
152.909 35.085 li
152.825 35.0566 li
cp
ef
158.312 22.1895 mo
158.312 22.1895 li
158 22.4155 li
157.718 22.6704 li
157.435 22.9531 li
157.18 23.2358 li
156.926 23.5469 li
156.7 23.8862 li
156.474 24.2251 li
156.246 24.5649 li
156.049 24.9326 li
155.851 25.3286 li
155.653 25.6963 li
155.483 26.1206 li
155.313 26.5161 li
155.144 26.9404 li
155.002 27.3647 li
154.833 27.8169 li
154.691 28.2412 li
154.551 28.6938 li
154.409 29.146 li
154.296 29.5986 li
154.154 30.0796 li
154.041 30.5317 li
153.928 30.9844 li
153.787 31.4653 li
153.673 31.9175 li
153.561 32.3701 li
153.447 32.8511 li
153.334 33.3032 li
153.192 33.7559 li
153.08 34.1802 li
152.966 34.6323 li
152.825 35.0566 li
152.909 35.085 li
153.051 34.6606 li
153.164 34.2085 li
153.277 33.7559 li
153.39 33.3032 li
153.532 32.8511 li
153.645 32.3984 li
153.758 31.9458 li
153.872 31.4653 li
153.984 31.0127 li
154.126 30.5601 li
154.239 30.0796 li
154.38 29.627 li
154.493 29.1743 li
154.635 28.7222 li
154.776 28.2695 li
154.918 27.8452 li
155.059 27.3931 li
155.229 26.9688 li
155.398 26.5444 li
155.568 26.1489 li
155.738 25.7524 li
155.907 25.3569 li
156.105 24.9893 li
156.332 24.6216 li
156.529 24.2539 li
156.756 23.9146 li
156.982 23.6035 li
157.237 23.2925 li
157.491 23.0098 li
157.774 22.7271 li
158.057 22.4722 li
158.368 22.2461 li
158.368 22.2461 li
158.312 22.1895 li
cp
ef
164.363 29.6553 mo
164.363 29.6553 li
164.788 28.7505 li
165.127 27.9019 li
165.382 27.1099 li
165.607 26.375 li
165.749 25.6963 li
165.862 25.0737 li
165.891 24.5083 li
165.891 23.9712 li
165.834 23.4907 li
165.749 23.0376 li
165.607 22.6421 li
165.41 22.2744 li
165.212 21.9634 li
164.957 21.7085 li
164.674 21.4824 li
164.363 21.2847 li
164.023 21.1147 li
163.685 21.0015 li
163.317 20.917 li
162.921 20.8599 li
162.525 20.832 li
162.129 20.832 li
161.733 20.8599 li
161.309 20.917 li
160.913 21.0015 li
160.489 21.1147 li
160.093 21.2563 li
159.697 21.3979 li
159.329 21.5674 li
158.962 21.7651 li
158.622 21.9634 li
158.312 22.1895 li
158.368 22.2461 li
158.679 22.02 li
159.019 21.8218 li
159.357 21.6523 li
159.753 21.4824 li
160.122 21.3413 li
160.517 21.1997 li
160.913 21.0864 li
161.337 21.0015 li
161.733 20.9453 li
162.129 20.917 li
162.525 20.917 li
162.921 20.9453 li
163.289 21.0015 li
163.656 21.0864 li
163.995 21.1997 li
164.307 21.3696 li
164.618 21.5386 li
164.9 21.7651 li
165.127 22.02 li
165.353 22.3311 li
165.523 22.6704 li
165.664 23.0659 li
165.749 23.4907 li
165.806 23.9712 li
165.806 24.48 li
165.777 25.0737 li
165.664 25.6963 li
165.523 26.375 li
165.325 27.082 li
165.042 27.8735 li
164.703 28.7222 li
164.278 29.5986 li
164.278 29.5986 li
164.363 29.6553 li
cp
ef
164.307 52.6191 mo
164.307 52.6191 li
164.42 51.9121 li
164.504 51.1768 li
164.533 50.4976 li
164.533 49.7905 li
164.504 49.1123 li
164.448 48.4614 li
164.363 47.7832 li
164.25 47.1323 li
164.137 46.4824 li
163.995 45.8037 li
163.854 45.1528 li
163.713 44.502 li
163.543 43.8516 li
163.402 43.2012 li
163.232 42.5513 li
163.091 41.9004 li
162.949 41.2222 li
162.836 40.5435 li
162.723 39.8647 li
162.639 39.186 li
162.582 38.4785 li
162.554 37.7715 li
162.525 37.0366 li
162.554 36.3013 li
162.61 35.5376 li
162.723 34.7456 li
162.864 33.9536 li
163.063 33.1338 li
163.317 32.3135 li
163.6 31.437 li
163.939 30.5601 li
164.363 29.6553 li
164.278 29.5986 li
163.882 30.5317 li
163.515 31.4087 li
163.232 32.2856 li
162.978 33.1055 li
162.779 33.9253 li
162.639 34.7456 li
162.525 35.5093 li
162.469 36.2729 li
162.44 37.0366 li
162.469 37.7715 li
162.497 38.4785 li
162.554 39.186 li
162.639 39.8926 li
162.751 40.5713 li
162.864 41.25 li
163.006 41.9004 li
163.176 42.5791 li
163.317 43.23 li
163.458 43.8799 li
163.628 44.5303 li
163.77 45.1807 li
163.911 45.8315 li
164.052 46.4824 li
164.166 47.1323 li
164.278 47.7832 li
164.363 48.4614 li
164.42 49.1123 li
164.448 49.7905 li
164.448 50.4976 li
164.42 51.1768 li
164.335 51.8838 li
164.222 52.6191 li
164.222 52.6191 li
164.307 52.6191 li
cp
ef
156.474 64.0156 mo
156.474 64.0156 li
156.671 63.563 li
156.869 63.1392 li
157.067 62.7715 li
157.293 62.4038 li
157.548 62.0645 li
157.774 61.7817 li
158.028 61.4985 li
158.312 61.2163 li
158.566 60.9614 li
158.849 60.7354 li
159.131 60.5093 li
159.414 60.2827 li
159.697 60.0566 li
159.979 59.8306 li
160.263 59.604 li
160.573 59.3779 li
160.856 59.1235 li
161.139 58.897 li
161.422 58.6143 li
161.705 58.3315 li
161.96 58.0488 li
162.242 57.7095 li
162.497 57.3701 li
162.751 57.0015 li
162.978 56.5781 li
163.204 56.1533 li
163.43 55.6733 li
163.628 55.1362 li
163.826 54.5981 li
163.995 53.9766 li
164.166 53.3262 li
164.307 52.6191 li
164.222 52.6191 li
164.081 53.2979 li
163.911 53.9482 li
163.741 54.5703 li
163.543 55.1079 li
163.345 55.645 li
163.147 56.0972 li
162.921 56.5498 li
162.666 56.9458 li
162.412 57.3135 li
162.158 57.6528 li
161.903 57.9922 li
161.62 58.2749 li
161.366 58.5581 li
161.083 58.812 li
160.8 59.0669 li
160.517 59.293 li
160.206 59.5474 li
159.924 59.7739 li
159.641 59.9717 li
159.357 60.1978 li
159.075 60.4243 li
158.792 60.6504 li
158.51 60.9048 li
158.227 61.1597 li
157.972 61.4424 li
157.718 61.7251 li
157.463 62.0361 li
157.237 62.3472 li
157.01 62.7148 li
156.784 63.1108 li
156.586 63.5068 li
156.389 63.9595 li
156.389 63.9595 li
156.474 64.0156 li
cp
ef
153.984 85.5371 mo
153.984 85.5371 li
154.296 85.0283 li
154.578 84.4902 li
154.833 83.9253 li
155.059 83.3315 li
155.229 82.7095 li
155.398 82.0581 li
155.54 81.3804 li
155.625 80.7017 li
155.709 79.9937 li
155.795 79.2593 li
155.823 78.5239 li
155.851 77.7598 li
155.879 77.0244 li
155.879 76.2324 li
155.879 75.4692 li
155.879 74.7056 li
155.851 73.9419 li
155.823 73.1782 li
155.823 72.4146 li
155.795 71.6514 li
155.795 70.8877 li
155.766 70.1523 li
155.766 69.4453 li
155.795 68.7383 li
155.795 68.0601 li
155.851 67.4092 li
155.907 66.7588 li
155.964 66.1367 li
156.049 65.5708 li
156.162 65.0054 li
156.304 64.4966 li
156.474 64.0156 li
156.389 63.9595 li
156.219 64.4683 li
156.078 64.9771 li
155.964 65.543 li
155.879 66.1367 li
155.823 66.7588 li
155.766 67.3813 li
155.709 68.0601 li
155.709 68.7383 li
155.681 69.4453 li
155.681 70.1523 li
155.709 70.8877 li
155.709 71.6514 li
155.738 72.4146 li
155.738 73.1782 li
155.766 73.9419 li
155.795 74.7056 li
155.795 75.4692 li
155.795 76.2324 li
155.795 76.9961 li
155.766 77.7598 li
155.738 78.5239 li
155.709 79.2593 li
155.625 79.9653 li
155.54 80.6724 li
155.455 81.3804 li
155.313 82.0308 li
155.144 82.6802 li
154.974 83.3032 li
154.748 83.897 li
154.521 84.4624 li
154.239 85 li
153.899 85.4805 li
153.899 85.4805 li
153.984 85.5371 li
cp
ef
152.005 104.795 mo
152.062 104.739 li
151.863 104.145 li
151.665 103.551 li
151.496 102.958 li
151.326 102.335 li
151.185 101.713 li
151.072 101.092 li
150.958 100.44 li
150.874 99.8184 li
150.789 99.168 li
150.732 98.5459 li
150.704 97.8955 li
150.675 97.2451 li
150.675 96.6509 li
150.704 96.0005 li
150.732 95.3501 li
150.789 94.728 li
150.846 94.0776 li
150.958 93.4556 li
151.043 92.8335 li
151.185 92.2114 li
151.298 91.5889 li
151.467 90.9951 li
151.637 90.4014 li
151.835 89.8076 li
152.033 89.2417 li
152.26 88.6763 li
152.514 88.1108 li
152.769 87.5728 li
153.051 87.0361 li
153.334 86.5269 li
153.645 86.0171 li
153.984 85.5371 li
153.899 85.4805 li
153.588 85.9614 li
153.277 86.4702 li
152.966 87.0078 li
152.684 87.5166 li
152.43 88.0825 li
152.175 88.6479 li
151.948 89.2134 li
151.75 89.7783 li
151.553 90.373 li
151.383 90.9668 li
151.213 91.5889 li
151.1 92.1831 li
150.958 92.8052 li
150.874 93.4556 li
150.761 94.0776 li
150.704 94.6997 li
150.647 95.3501 li
150.619 96.0005 li
150.591 96.6509 li
150.591 97.2451 li
150.619 97.8955 li
150.647 98.5459 li
150.704 99.1963 li
150.789 99.8184 li
150.874 100.469 li
150.986 101.092 li
151.1 101.742 li
151.241 102.364 li
151.411 102.986 li
151.581 103.581 li
151.778 104.174 li
151.977 104.767 li
152.062 104.739 li
152.005 104.795 li
cp
ef
141.089 83.6133 mo
141.004 83.6426 li
141.032 83.6982 li
141.061 83.8115 li
141.117 84.0093 li
141.173 84.292 li
141.287 84.6323 li
141.399 85.0283 li
141.541 85.4805 li
141.711 86.0171 li
141.909 86.5835 li
142.107 87.2056 li
142.333 87.8843 li
142.587 88.563 li
142.842 89.3267 li
143.153 90.0903 li
143.464 90.8823 li
143.804 91.7017 li
144.143 92.5498 li
144.539 93.4272 li
144.935 94.2759 li
145.331 95.1523 li
145.783 96.0571 li
146.236 96.9341 li
146.717 97.7822 li
147.226 98.6309 li
147.763 99.5073 li
148.3 100.328 li
148.865 101.147 li
149.459 101.939 li
150.054 102.703 li
150.675 103.438 li
151.326 104.145 li
152.005 104.795 li
152.062 104.739 li
151.383 104.088 li
150.732 103.382 li
150.11 102.675 li
149.517 101.911 li
148.922 101.119 li
148.357 100.299 li
147.819 99.4507 li
147.31 98.6025 li
146.802 97.7256 li
146.321 96.8774 li
145.868 96.0005 li
145.415 95.124 li
144.991 94.2476 li
144.596 93.3706 li
144.228 92.5225 li
143.86 91.6738 li
143.549 90.854 li
143.238 90.061 li
142.927 89.2983 li
142.672 88.5342 li
142.418 87.8555 li
142.192 87.1772 li
141.965 86.5552 li
141.796 85.9897 li
141.626 85.4805 li
141.484 85 li
141.371 84.603 li
141.259 84.2646 li
141.202 83.9819 li
141.146 83.7837 li
141.117 83.6709 li
141.089 83.6426 li
141.004 83.6709 li
141.089 83.6133 li
cp
ef
141.089 83.6133 mo
141.061 83.6426 li
141.061 83.6426 li
141.061 83.6426 li
141.061 83.6426 li
141.004 83.6709 li
141.089 83.6133 li
cp
ef
141.089 83.6133 mo
141.061 83.6426 li
141.061 83.6426 li
141.061 83.6426 li
141.061 83.6426 li
141.004 83.6709 li
141.089 83.6133 li
cp
ef
141.089 83.6133 mo
141.061 83.6426 li
141.061 83.6426 li
141.061 83.6426 li
141.061 83.6426 li
141.004 83.6709 li
141.089 83.6133 li
cp
ef
90.3672 116.214 mo
89.2407 117.157 86.8516 121.218 86.8516 124.083 cv
86.8516 125.736 87.4443 127.381 88.1245 129.103 cv
88.8047 125.209 89.5464 121.268 90.3423 117.347 cv
90.3979 116.799 90.3896 116.441 90.3672 116.214 cv
90.3672 116.214 li
cp
150.61 178.272 mo
147.429 178.272 144.91 174.527 141.991 170.191 cv
138.052 164.333 133.147 157.043 125.197 156.808 cv
125.046 156.804 124.897 156.802 124.748 156.802 cv
117.26 156.802 110.45 162.423 104.44 167.384 cv
99.3472 171.587 94.9512 175.217 90.7227 175.217 cv
88.5337 175.217 86.9404 174.664 85.855 173.52 cv
84.2515 171.833 83.71 168.925 83.9868 163.488 cv
84.0635 161.94 84.1665 160.334 84.2949 158.637 cv
83.9805 158.835 83.6353 158.956 83.2549 158.956 cv
81.418 158.956 78.7515 158.325 77.2905 156.545 cv
76.3726 155.431 76.0542 154.003 76.3687 152.418 cv
76.7363 150.545 78.1152 148.931 79.5742 147.222 cv
81.6821 144.75 84.0737 141.95 84.1851 137.634 cv
84.2764 134.121 83.6353 132.157 82.9595 130.08 cv
82.2031 127.755 81.4199 125.354 81.6968 120.86 cv
81.9219 117.221 83.8774 114.619 86.1445 111.607 cv
89.1538 107.604 92.9028 102.621 94.8003 92.7871 cv
97.1934 71.6377 98.0225 40.0693 95.5259 34.8423 cv
95.3604 34.4951 95.439 34.0815 95.7178 33.8193 cv
95.8853 33.6621 96.1025 33.5815 96.3213 33.5815 cv
96.4683 33.5815 96.6172 33.6167 96.7515 33.6934 cv
106.472 39.1309 127.117 58.3853 142.628 84.2017 cv
143.337 84.8647 144.211 85.2017 145.23 85.2017 cv
148.095 85.2017 151.455 82.4819 151.662 78.8423 cv
152.005 72.8071 151.027 66.2144 148.068 65.9971 cv
145.912 65.8403 144.128 64.7241 142.403 63.6475 cv
140.791 62.6367 139.265 61.6836 137.546 61.5576 cv
137.424 61.5493 137.304 61.5454 137.182 61.5454 cv
136.171 61.5454 135.062 61.8472 134.17 62.0889 cv
134.032 62.126 li
132.958 62.4175 131.943 62.6924 130.949 62.6924 cv
129.024 62.6924 127.712 61.6196 126.937 59.4146 cv
126.373 57.8105 126.482 56.3306 127.259 55.0186 cv
128.762 52.4805 132.488 51.1309 135.847 50.4136 cv
132.461 46.7158 129.944 42.4521 127.792 36.814 cv
126.42 33.2114 125.29 29.7578 126.505 27.0898 cv
127.162 25.645 128.464 24.5537 130.378 23.8511 cv
130.936 23.6445 131.476 23.541 131.98 23.541 cv
134.663 23.541 135.868 26.2051 137.263 29.2886 cv
138.081 31.1016 138.974 33.0752 140.262 34.7739 cv
138.999 29.8057 138.561 27.2305 138.68 23.7993 cv
138.703 23.0762 li
138.798 19.8374 138.896 16.4893 143.525 16.4893 cv
144.052 16.4893 144.643 16.5347 145.282 16.6235 cv
149.101 17.1484 149.85 21.5547 150.575 25.8188 cv
151.015 28.4082 151.468 31.0684 152.528 33.0483 cv
152.625 32.6782 152.72 32.3062 152.817 31.9302 cv
153.867 27.8379 154.952 23.6069 157.819 21.5073 cv
159.09 20.5752 160.847 19.9946 162.403 19.9946 cv
164.063 19.9946 165.379 20.6353 166.109 21.7988 cv
167.227 23.5742 166.896 26.3374 165.129 30.0103 cv
162.44 35.5967 163.385 39.5278 164.383 43.6904 cv
165.061 46.5176 165.764 49.4419 165.144 52.7798 cv
164.247 57.6143 162.176 59.2075 160.349 60.6133 cv
159.082 61.5864 157.988 62.4277 157.267 64.3047 cv
156.513 66.2681 156.593 69.459 156.678 72.8364 cv
156.8 77.7529 156.926 82.8354 154.675 86.0181 cv
151.563 90.4224 150.67 97.0981 152.396 103.044 cv
159.923 120.249 163.713 137.498 163.66 154.316 cv
163.608 174.124 158.867 178.098 150.695 178.27 cv
150.688 178.27 150.616 178.272 150.61 178.272 cv
150.61 178.272 li
cp
ef
87.877 125.48 mo
87.7856 125.011 87.7339 124.546 87.7339 124.083 cv
87.7339 122.829 88.272 121.263 88.9331 119.902 cv
88.5674 121.768 88.2148 123.629 87.877 125.48 cv
87.877 125.48 li
cp
130.95 63.5762 mo
132.062 63.5762 133.183 63.2715 134.267 62.9771 cv
134.403 62.9399 li
135.246 62.7114 136.294 62.4268 137.19 62.4268 cv
137.288 62.4268 137.385 62.4297 137.481 62.437 cv
138.983 62.5464 140.417 63.4434 141.936 64.3931 cv
143.667 65.4761 145.629 66.7036 148.002 66.877 cv
149.901 67.0156 151.148 72.3599 150.782 78.791 cv
150.604 81.9053 147.651 84.3203 145.229 84.3203 cv
144.484 84.3203 143.841 84.0898 143.313 83.6353 cv
138.866 76.2446 133.999 69.3896 129.084 63.2378 cv
129.646 63.4629 130.268 63.5762 130.95 63.5762 cv
130.95 63.5762 li
cp
143.526 15.6069 mo
138.038 15.6069 137.913 19.9097 137.822 23.0518 cv
137.8 23.7681 li
137.735 25.6133 137.836 27.2461 138.108 29.0229 cv
138.094 28.9902 138.079 28.9575 138.064 28.9253 cv
136.672 25.8452 135.232 22.6602 131.979 22.6592 cv
131.372 22.6592 130.73 22.7817 130.073 23.0239 cv
127.932 23.8115 126.461 25.0566 125.702 26.7241 cv
124.346 29.7031 125.528 33.3447 126.97 37.127 cv
128.95 42.3213 131.24 46.3745 134.22 49.897 cv
131.097 50.7266 127.936 52.1455 126.501 54.5684 cv
125.627 56.0449 125.47 57.7554 126.044 59.5264 cv
114.74 46.0674 103.603 36.5142 97.1816 32.9243 cv
96.9121 32.7734 96.6162 32.6997 96.3218 32.6997 cv
95.8838 32.6997 95.4507 32.8628 95.1157 33.1768 cv
94.5552 33.7021 94.3994 34.5298 94.7305 35.2227 cv
96.9253 39.8184 96.5015 69.873 93.9224 92.687 cv
92.0586 102.276 88.3892 107.155 85.4395 111.076 cv
83.0879 114.203 81.0576 116.902 80.8174 120.807 cv
80.5308 125.466 81.3394 127.95 82.1216 130.352 cv
82.7739 132.357 83.3901 134.25 83.3032 137.612 cv
83.2002 141.616 81.0156 144.175 78.9033 146.65 cv
77.3672 148.45 75.9165 150.15 75.5029 152.249 cv
75.1372 154.101 75.5195 155.782 76.6089 157.107 cv
78.2666 159.124 81.2256 159.838 83.2559 159.838 cv
83.2788 159.838 83.3013 159.838 83.3237 159.837 cv
83.2373 161.083 83.1655 162.28 83.1074 163.446 cv
82.8154 169.149 83.4263 172.244 85.2153 174.127 cv
86.4766 175.455 88.2773 176.099 90.7217 176.099 cv
95.2676 176.099 99.7788 172.375 105.003 168.064 cv
110.897 163.198 117.579 157.683 124.749 157.683 cv
124.89 157.683 125.03 157.685 125.171 157.689 cv
132.669 157.912 137.233 164.697 141.26 170.682 cv
144.318 175.228 146.959 179.154 150.608 179.154 cv
150.717 179.153 li
159.209 178.973 164.486 174.756 164.542 154.319 cv
164.597 137.398 160.791 120.049 153.229 102.75 cv
151.619 97.1499 152.485 90.6436 155.396 86.5264 cv
157.814 83.1064 157.684 77.8755 157.558 72.8174 cv
157.479 69.6724 157.398 66.4209 158.09 64.6201 cv
158.722 62.9751 159.677 62.2407 160.886 61.311 cv
162.743 59.8838 165.053 58.1069 166.012 52.9404 cv
166.665 49.4194 165.94 46.4028 165.24 43.4854 cv
164.279 39.479 163.371 35.6948 165.923 30.3916 cv
167.831 26.4287 168.145 23.3799 166.856 21.3291 cv
165.958 19.9004 164.377 19.1138 162.404 19.1138 cv
160.644 19.1138 158.734 19.7427 157.297 20.7959 cv
154.554 22.8062 153.353 26.4399 152.362 30.1724 cv
151.971 28.7681 151.705 27.207 151.444 25.6714 cv
150.702 21.3081 149.861 16.3628 145.402 15.748 cv
144.723 15.6548 144.092 15.6069 143.526 15.6069 cv
143.526 15.6069 li
cp
88.4541 132.431 mo
89.2969 127.352 90.2295 122.338 91.2051 117.523 cv
91.3828 115.831 91.1128 115.149 90.6162 115.15 cv
89.2061 115.15 85.9707 120.639 85.9707 124.083 cv
85.9707 126.862 87.4229 129.417 88.4541 132.431 cv
143.526 17.3701 mo
144.008 17.3701 144.551 17.4106 145.161 17.4946 cv
150.901 18.2861 148.413 30.2212 152.882 35.085 cv
154.239 30.4756 155.059 24.6216 158.34 22.2178 cv
159.433 21.417 160.989 20.8765 162.404 20.8765 cv
165.237 20.8765 167.503 23.0444 164.335 29.627 cv
159.584 39.4966 165.721 44.8423 164.278 52.6191 cv
162.836 60.396 158.368 58.9819 156.445 63.9878 cv
154.521 68.9927 157.576 80.3901 153.956 85.5088 cv
150.604 90.2505 149.803 97.3423 151.567 103.352 cv
158.33 118.791 162.838 136.04 162.779 154.314 cv
162.723 174.93 157.35 177.25 150.675 177.39 cv
150.653 177.39 150.631 177.391 150.608 177.391 cv
143.972 177.391 139.429 156.348 125.224 155.927 cv
125.064 155.922 124.907 155.92 124.749 155.92 cv
110.746 155.92 99.5586 174.336 90.7217 174.336 cv
85.6597 174.336 84.4717 171.283 84.8682 163.534 cv
84.9961 160.957 85.1899 158.304 85.4292 155.611 cv
84.7295 157.125 83.9932 158.076 83.2559 158.076 cv
80.7393 158.076 76.4121 156.747 77.2324 152.589 cv
78.0518 148.433 84.8682 145.321 85.0654 137.657 cv
85.2637 129.994 82.0674 129.202 82.5771 120.915 cv
83.0625 113.015 92.2832 110.476 95.6665 92.9541 cv
98.0791 71.6587 98.9507 39.9692 96.3213 34.4629 cv
105.021 39.3267 125.882 58.0024 141.931 84.7563 cv
142.865 85.6763 144.023 86.0835 145.229 86.0835 cv
148.59 86.0835 152.313 82.9209 152.542 78.8911 cv
152.882 72.9243 152.005 65.4014 148.131 65.1187 cv
144.256 64.8359 141.484 60.9614 137.61 60.6787 cv
137.471 60.6685 137.331 60.6636 137.19 60.6636 cv
136.103 60.6636 135.001 60.9512 133.942 61.2383 cv
132.883 61.5259 131.866 61.813 130.95 61.813 cv
129.621 61.813 128.502 61.2085 127.769 59.1235 cv
125.959 53.9766 132.633 51.7988 137.61 50.978 cv
133.17 46.5381 130.568 41.6177 128.617 36.499 cv
126.666 31.3804 125.224 26.686 130.682 24.6782 cv
131.156 24.5034 131.585 24.4224 131.979 24.4224 cv
136.111 24.4233 136.231 33.4028 141.938 37.7153 cv
140.099 30.7583 139.42 27.8735 139.562 23.8296 cv
139.688 20.2158 139.475 17.3696 143.526 17.3701 cv
0 0 0 0 cmyk
f
100.026 97.8955 mo
97.8203 108.699 84.0479 169.02 91.061 169.784 cv
98.0742 170.547 108.058 151.119 124.403 151.259 cv
140.777 151.402 147.226 173.036 151.213 172.894 cv
155.2 172.753 157.831 174.308 158.255 149.93 cv
158.679 125.554 143.804 94.417 135.009 80.7017 cv
123.074 81.4644 110.235 91.0234 100.026 97.8955 cv
100.026 97.8955 li
100.026 97.8955 li
100.026 97.8955 li
cp
ef
109.754 82.2559 mo
130.456 82.2559 li
128.589 76.2051 122.396 73.8003 116.881 74.1401 cv
110.207 74.5366 100.591 80.2764 100.394 87.6865 cv
100.195 95.0957 105.229 101.543 113.686 101.798 cv
113.686 101.798 li
113.686 101.798 li
113.686 101.798 li
122.141 102.052 130.738 95.7461 130.993 86.5269 cv
131.021 84.9434 130.823 83.501 130.456 82.2559 cv
109.754 82.2559 li
cp
0.0470588 0.976471 1 0.00784314 cmyk
ef
129.409 86.4702 mo
129.409 86.4702 li
129.381 87.2622 li
129.296 87.9976 li
129.154 88.7329 li
128.985 89.4399 li
128.787 90.146 li
128.561 90.8247 li
128.277 91.4761 li
127.967 92.1265 li
127.627 92.7485 li
127.26 93.3423 li
126.835 93.936 li
126.412 94.502 li
125.931 95.0391 li
125.45 95.5483 li
124.941 96.0571 li
124.403 96.5381 li
123.838 96.9624 li
123.244 97.3579 li
122.678 97.7539 li
122.057 98.1499 li
121.406 98.4893 li
120.755 98.8003 li
120.076 99.083 li
119.397 99.3374 li
118.719 99.564 li
118.012 99.7617 li
117.305 99.9033 li
116.598 100.044 li
115.891 100.129 li
115.156 100.214 li
114.448 100.243 li
113.713 100.214 li
113.629 103.354 li
114.505 103.354 li
115.354 103.325 li
116.23 103.24 li
117.079 103.127 li
117.927 102.986 li
118.775 102.788 li
119.596 102.562 li
120.416 102.279 li
121.236 101.996 li
122.028 101.657 li
122.791 101.261 li
123.555 100.865 li
124.29 100.412 li
125.025 99.9316 li
125.705 99.4224 li
126.383 98.9136 li
127.033 98.3198 li
127.655 97.7256 li
128.277 97.1318 li
128.815 96.4814 li
129.353 95.7744 li
129.861 95.0674 li
130.314 94.332 li
130.738 93.5688 li
131.134 92.7769 li
131.474 91.9565 li
131.785 91.1084 li
132.039 90.2314 li
132.237 89.355 li
132.378 88.4502 li
132.491 87.5166 li
132.548 86.5552 li
132.548 86.5552 li
129.409 86.4702 li
cp
0.858823 0.85098 0.788235 1 cmyk
ef
116.966 75.6958 mo
116.966 75.6958 li
117.531 75.667 li
118.097 75.667 li
118.691 75.6958 li
119.256 75.7236 li
119.85 75.8081 li
120.416 75.894 li
120.981 76.0063 li
121.547 76.1196 li
122.112 76.2896 li
122.65 76.4595 li
123.159 76.6567 li
123.668 76.8838 li
124.178 77.1089 li
124.658 77.3926 li
125.139 77.6748 li
125.591 77.9858 li
126.015 78.3257 li
126.439 78.6938 li
126.835 79.061 li
127.203 79.457 li
127.543 79.8813 li
127.854 80.3335 li
128.137 80.8145 li
128.419 81.3228 li
128.646 81.8608 li
128.872 82.4263 li
129.041 83.0205 li
129.183 83.6426 li
129.296 84.292 li
129.381 85 li
129.409 85.707 li
129.409 86.4702 li
132.548 86.5552 li
132.548 85.6504 li
132.491 84.7446 li
132.406 83.8687 li
132.266 83.0205 li
132.067 82.1997 li
131.841 81.436 li
131.559 80.6724 li
131.219 79.9653 li
130.88 79.2876 li
130.456 78.6362 li
130.031 78.0151 li
129.579 77.4209 li
129.07 76.8838 li
128.561 76.3745 li
127.995 75.894 li
127.43 75.4692 li
126.835 75.0449 li
126.241 74.6772 li
125.619 74.3379 li
124.969 74.0269 li
124.318 73.7437 li
123.64 73.4893 li
122.961 73.2925 li
122.311 73.0933 li
121.632 72.9243 li
120.953 72.8115 li
120.246 72.6978 li
119.539 72.6128 li
118.86 72.5562 li
118.153 72.5562 li
117.475 72.5562 li
116.768 72.5562 li
116.768 72.5562 li
116.966 75.6958 li
cp
ef
101.949 87.7148 mo
101.949 87.7148 li
101.978 87.1489 li
102.062 86.5835 li
102.203 86.0464 li
102.345 85.4805 li
102.571 84.9434 li
102.797 84.4053 li
103.108 83.8687 li
103.419 83.3599 li
103.787 82.8223 li
104.155 82.3135 li
104.579 81.8325 li
105.031 81.3521 li
105.541 80.8711 li
106.05 80.4185 li
106.559 79.9653 li
107.124 79.542 li
107.69 79.146 li
108.312 78.7495 li
108.906 78.3823 li
109.528 78.0151 li
110.15 77.6748 li
110.772 77.3926 li
111.423 77.1089 li
112.073 76.8267 li
112.724 76.6001 li
113.346 76.4023 li
113.996 76.2051 li
114.619 76.063 li
115.212 75.9214 li
115.835 75.8374 li
116.4 75.7515 li
116.966 75.6958 li
116.768 72.5562 li
116.061 72.6411 li
115.354 72.7266 li
114.646 72.8389 li
113.912 73.0093 li
113.176 73.1782 li
112.44 73.4048 li
111.677 73.6592 li
110.942 73.9136 li
110.207 74.2246 li
109.471 74.5366 li
108.736 74.9033 li
108.029 75.271 li
107.322 75.667 li
106.615 76.0918 li
105.937 76.5435 li
105.258 77.0244 li
104.636 77.5054 li
103.985 78.0425 li
103.391 78.5806 li
102.826 79.146 li
102.26 79.7397 li
101.751 80.3613 li
101.242 80.9844 li
100.79 81.6348 li
100.365 82.3135 li
99.9971 83.0205 li
99.6582 83.7554 li
99.4038 84.4902 li
99.1489 85.2539 li
98.9795 86.0464 li
98.8662 86.8379 li
98.8096 87.6577 li
98.8096 87.6577 li
101.949 87.7148 li
cp
ef
113.713 100.214 mo
113.007 100.186 li
112.328 100.129 li
111.649 100.016 li
110.998 99.9033 li
110.404 99.7334 li
109.782 99.5356 li
109.217 99.3374 li
108.651 99.1113 li
108.114 98.8286 li
107.605 98.5459 li
107.096 98.2349 li
106.644 97.8955 li
106.191 97.5562 li
105.738 97.1885 li
105.343 96.8208 li
104.946 96.3965 li
104.579 95.9722 li
104.24 95.52 li
103.929 95.0391 li
103.617 94.5586 li
103.363 94.0493 li
103.108 93.5405 li
102.883 93.0029 li
102.656 92.4658 li
102.486 91.9282 li
102.345 91.3345 li
102.203 90.769 li
102.09 90.1753 li
102.034 89.5811 li
101.978 88.959 li
101.949 88.3652 li
101.949 87.7148 li
98.8096 87.6577 li
98.8096 88.3936 li
98.8379 89.1572 li
98.8945 89.8921 li
99.0078 90.6558 li
99.1211 91.3628 li
99.291 92.0981 li
99.4883 92.8052 li
99.7148 93.5122 li
99.9697 94.1909 li
100.252 94.8413 li
100.563 95.4917 li
100.931 96.1421 li
101.299 96.7642 li
101.694 97.3296 li
102.147 97.8955 li
102.628 98.4609 li
103.108 98.9702 li
103.646 99.479 li
104.183 99.96 li
104.777 100.412 li
105.371 100.836 li
106.021 101.232 li
106.672 101.6 li
107.351 101.939 li
108.058 102.25 li
108.792 102.505 li
109.556 102.759 li
110.319 102.958 li
111.111 103.099 li
111.932 103.24 li
112.78 103.325 li
113.629 103.354 li
113.713 100.214 li
cp
ef
113.686 101.798 mo
113.686 101.798 li
113.686 101.798 li
113.686 101.798 li
113.686 101.798 li
113.686 101.798 li
cp
ef
113.686 101.798 mo
113.686 101.798 li
113.686 101.798 li
113.686 101.798 li
113.686 101.798 li
113.686 101.798 li
cp
ef
0 0 0 0 cmyk
%ADOBeginSubsetFont: MyriadPro-Bold Initial
%ADOt1write: (1.0.24)12 dict dup begin/FontType 1 def/FontName /MyriadPro-Bold def/FontInfo 7 dict dup begin/Notice (Copyright 2000, 2004 , 2005Adobe Systems Incorporated. All Rights Reserved. U.S. Patent D454,582.Myriad is a registered trademark of Adobe Systems Incorporated.) def/Weight (Bold) def/ItalicAngle 0 def/FSType 8 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 50 /two putdef/FontBBox {-163 -250 1256 989} defendsystemdict begindup /Private16 dict dup begin/|- {def} def/| {put} def/BlueValues [-11 -0 674 686 489 500 650 661 711 721 242 248] def/OtherBlues [438 443 260 266 -209 -198 -153 -147 -127 -120] def/FamilyBlues [-11 -0 674 686 484 495 650 661 710 721 241 248] def/FamilyOtherBlues [438 444 260 266 -209 -198 -153 -147 -118 -112] def/BlueScale 0.0604582 def/StdHW [112] def/StdVW [152] def/StemSnapH [112] def/StemSnapV [152 161] def/ForceBold true def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/two <1C60D8A8C9B790A83DC936B27E296C7704835473EC9217201F3A74276DD00F92D74D809E58576A84C4A8CBE8C1CFDDBF11D24D5D30EDAF9EFABDCC1FDDD8D9FF3BFF3A4FA07F0A25AD11902B74796294FCD7F36EE9EDC3EDD792> |-/.notdef <1C60D8A8C9B7A73DC56ED86B010528A4AE924D9B6A4AEB6B57364CBBC1FC7743E3F5B16223C8BD8911534CBC6ED69BD6AA5A2C449B7A6EF268B5A0D64C6C74FC81FE7341B7ED82094E8390BB44FFD88AB4DB74763338FA8306E917B17192> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/PBGHHM+MyriadPro-Bold /MyriadPro-Bold findfont ct_VMDictPut/PBGHHM+MyriadPro-Bold*1 [50{/.notdef}rp /two 205{/.notdef}rp]PBGHHM+MyriadPro-Bold nfPBGHHM+MyriadPro-Bold*1 [71.6577 0 0 -59.6595 0 0 ]msf200.445 49.9355 mo(2)sh0.929412 0.694118 0.490196 0.517647 cmyk
%ADOBeginSubsetFont: MyriadPro-Bold AddGlyphs
%ADOt1write: (1.0.24)systemdict beginPBGHHM+MyriadPro-Bold dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/period <1C60D8A8C9B8666CA9DB8529FD5448EC53C1D9CC98D1937F37ECFF1393184F7828B8BE844ED06E4CC8AEC66E9E7163252CA5E895EF584EFF903C1B50> |-/a <1C60D8A8C9B78B91867A8DC7C15FB2F1EFCCE662FE7E94DF6E422BBEE72A67AEA2801F2EE84F7CFB4F9956BC426F412C4178524DEBC72E9E6D43013FA16F8661D1BA0E34A7DEB828BE5ABA977829F9F5C7F98F9A02AF262C0B0D3A70C7153CD8A4B87C7061A7C92B7642E5DFA832CB025EA56A2CD0763C2BE66C69BE9CBD428B4C926AF99F3CB18402D6E85F2A7A7DDFC3BFF9A1156A87853ABCF1FC6D8F3042EF84F5EA079A50E6149F3EC11653057C02F2DD28E109196E25F76243C63921C63883C8921C64EAED> |-/d <1C60D8A8C9B7C7F3FCFFFDBE7393BB36102C5759E26E5E43B4CCDB4767102FDBA8EA02BABD953878E80F985568413220E81148A579101CFA5A5C52E89E880D63BB9793B88E07ABCA0C0461CA7DB3EF04ABDDBEF5443ED082E67EBDA55E5B6FC899A49069C92908DD7B05A83A03F10238E2E961FCF0E3157F873B4405DD285C3B0045720AC6674868FEEF080898F658D34B11E225C1D10F3E25138456F198C2E8B27A702AD3258F5372E313D8C1D69CBBABE8B5A4A6B7DFD6992D6CE515817CBBEF4177252F8A5FA7FE9E4756> |-/e <1C60D8A8C9B78B91A62DC4AFDB554115AEB14AE316FEDC9F958F9BA72E3CE5B3E7945F15D022A275EB25EDA3D55BE27D1685A135827E78A3FECD93F137D86C0AC8EA4BFD21D9B5E3365A710D2F1323F636D60C7C77C80F1614227789A53A474BB621C83EAB0AC63ED626> |-/g <1C60D8A8C9B7F2A7FF35CBB5E924B0A04AC0B8B949DA5FA2BBB091F59D3C2F337A91C15C27E72821250AD82BD0B78E89A74C8CA2711FE233CA2BB303B7010F8C416536A2654D7DBD22AF3309123B710FCCE78B78AE7E8F96E2515227D758C35FF609CF7EEA3206959EE33E0C51630DC21E7FA9F3290970071269DAD4121D7BF9B0275927B62885A5BC87256B3367E9A9068D28289DEEE82141984FEE6F76FCA94AE1500937E548F65FDEA3BE10263FE57CDD10EA5B87FC7C6098D9A283C0BAB816F1DC76CE106DFEC7734302E0A94ADC6833ECF67FD466> |-/j <1C60D8A8C9B849F23065336760A3E43700033613173196682E1E8C0E3895516B9C66C25AA0B375876B845C8E397BD6EB4A41456B8925FC7C24BA374C843B8FFD2A9506F9D296BA848DDE70E2296CC23304935AFAE36C870BFA5251EC6C32535C9A34417A57F9FA0A5B623012AB26240D654CD2576A> |-/m <1C60D8A8C9B691D42E18896E3BD0E969BB8E1120FF1198ECDA79917C237DA17E446DF94F64D83B8E343242C998A422C1A27C67AFA166FE00C532A6B9ECE85177C2EAC432E0D695B1CB17D79BEBF84BA73AC32EC80A6FE66EBC09CD1EB446D5A7B90ACDA7922487A0AA70D75E9B6C0B0BD39EE7DB305F2FF1FB59FB878EE03F4C58966A097BC6A1E26A944E1E98969F2A180C6229AB45E2056A3394F7FE169726A3F2E859EF1FB038B8A8F858E07A099992891161499ECCCDCFEADEDBBB43D797C1> |-/u <1C60D8A8C9B7F44A9B78E03EAC1EFBCA5BC244005D2189F60AA9A78F8740415B5EBE3DA68388E1F3C35B7196D21D87E5084EA6D30FE2A9A2D89E2CD8DD21E4B19F6144B8E558DE206EC1DD22A20A4666916EB8010F91DABD59DE3C32B104C117746AFC228468A38751C36C5324D99750689C59FBF2DF3A4A558E455EF02F115E5B80> |-systemdict /gcheck known {setglobal} if end {end} ifendPBGHHM+MyriadPro-Bold /Encoding getdup 46 /period putdup 97 /a putdup 100 /d putdup 101 /e putdup 103 /g putdup 106 /j putdup 109 /m putdup 117 /u putpop%ADOEndSubsetFont
/PBGHHM+MyriadPro-Bold*1 [46{/.notdef}rp /period 3{/.notdef}rp /two 46{/.notdef}rp /a 2{/.notdef}rp /d /e /.notdef /g 2{/.notdef}rp /j 2{/.notdef}rp /m 7{/.notdef}rp /u 138{/.notdef}rp]PBGHHM+MyriadPro-Bold nfPBGHHM+MyriadPro-Bold*1 [78.0016 0 0 -78.0016 0 0 ]msf0.000244141 256.711 mo(majug.de)[67.0803 41.1848 22.6973 45.4744 44.3047 20.2798 46.4883 0 ]xsh%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/PBGHHM+MyriadPro-Bold*1 uf/PBGHHM+MyriadPro-Bold uf/MyriadPro-Bold ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.2%%For: (Oliver Gierke) ()%%Title: (majug-logo-var Kopie.eps)%%CreationDate: 2/9/10 9:03 PM%AI9_DataStream%Gb"-6fm;pEZRC-+J9QMhKH=sY'11n+JHQ%M+W[72K[@_n3TlbGqe>a[m&P3:?L3p;hUoh)F3T3*4hgFq!j\mWQ)[GV-'`#MB,Bn0%?p#NB(Oma4,SdddiM\UJN`j99OMu)jNuKpV<Q@mu&IL!WrK2=Q#do<a+;KmO/,;V`4eq2@3j\&!/=Tj;(CZe;k'hI9f%]TuSoh)O%H9,@0C!BDbrJBm+iaTWRWjfa1EH_EOqm).E5k_k$?7r-cHD"1iEujZ_a&BRZ?tS5[2=;hg)+etVlg](9\"<8+-=I@WNb,AG*K8YR%$Rc%!kW;jn4mu1u"1euPd=^a&4D)unBEs$*d]4+E!hba-=RNV'OnUY?-2b#e/4Kg5(EsoQ^JXVbCaH4/f6WcpBg@]Hd.;Gt#HpSB%QIG8Z`mbG1&Sj'A&cV>YTMP>3'sWo6J(P["KrraIg`P[M9,+<((t3s9@ClF-I'm@s\3AKaI?$9)B%7n$%Gd#`.;OU4\C/BC8i%"L%nVZX3juUf$G.SU<;n`OP>F]k6`sM[)PWlVbXY)E(=26GHl$>3nbS/PE_*8"L=1c4\7KQCjddu&L&S(,77LA9X1^"hN#"^Qc[misa%)T*]7KJa\1JWUclNtH+/[3.:HK`S0j&Cm0<BKT)c80V[=O[5-L]b3+B8:q_TX>0,FpV7l7rJq?d3E2^(Wtde\;$V!]h+I&GK`AIe%E!u8'DD=M2!6eoudXV>e`H3ioSr)@p'6nr=[(KRon\EIsZ(bB7CJ%gkOhce;r]u0m`<)IDQtG7_)os`&3045S*)EKg5bZq>YNWdX%$<W`,e:_S&^k;DOQ`JQRXTa4k(uUJ6Pl<2[Q0N>WGB)YkTlD!cBaN/AX0h4n>'tJ:2*^6gN+I.O@\#Msh@`q0FVe<=Krj]/XLmCe%=`[Tp>h-5]eIkuBFU-aMLh6\j5`hiFI@te7?.$k1on'%;M!kDYolNg0!m<3K.'WUVN0)-*#JDQ_M1G[mDpX,%J$B+[1AY/X<_R^&%,H2)j3/HMjo>PH0%g/4dTZ0a=m$C-l>#*]9Ccl&tQ%Zoek]pRE<Ynsul3VqVb[<t/;r]lt^<aB,Im$4bKF2!5kFqpWBbki3YkW8\%T`=:Q]/0@"\80mg:>lBHXW`MiGeT$S#aF;4Sh3uAHFT,eEKgI:4C4bRZV+,EJIFIS)4oOV5D?lSn]6(X-jAfPrdu(+8;nK&IW0/`%?W&mc3#MZM7LUIR9r*&=r&/)sgkZ`sbQ;:3,t5`ks2*#`!lHa7QtHq[**<94`;hUu*c"?mH<lgP&]?o,lKW/iAq<B%JW,OV$aT4=%N\_"dEWqI[f3J-ZS6`>;9%R=E)HWmbCJX/<NN;TbeTd07o>!L-TTN^:EBs4U2\<<5T0`AbC*-OCp9?l%,0`]d-1J=6O1NP]2XRYK%+GYk84ULbmn=HIV^j7hbdqQ'@IjD+>n;s,:YaR&cq[57J-`e?M9WOb0?N[;8!EFPCH+.+i`^([R9j9E+7?;?b>1/^<1.(PPD'bsn%!76N#=a-e5,8(j>LEI\>?S\TJ1r0nlC!p9Db34V7N0-[+5knF@mW:-(%Kk'<0F&.2/XaRch$;IaL)*i]a[,O'Gb?si7pW0LN/%M.%$'694a`oYh?,?u!nQ<_>JNQ(!gP$h=4SOHWrCtU.[$:t1W:CYt\^UI6lRf!)!;DhP/@hp=3P'Bac?0sL1kf'"QKUoA;kL5O;2JGW%Qe1if_W&LuZ.?Of0//STel\9(0?^$A@baHU9@&#>^ppG[B@*n4e>SE-TRD\)rpG$q15+%aOL['Nep?5H5nTL@ZFa`5\a6B#\K7s<%m;4`XBX20M=_>p-=^-g'<(+@/V#Q/m=cVYr4]S2XI.fraPJ?ATkW]OsQi[\T$%<0)i1KKTNt4AYam;escm[KL-&ZE5EF0+FMY*Fi%6sllH'VCl`66-_U?CQ#+[0ceTNM]3_\Ec/eqB#\L9N?LS=\t[h6XasaA^&FF-C:!:h[TAli<bB`!"sqG=_n=OLTFSHFm.B5/)YMg%U#;pBJlr8=VhacA,U6Q.q2G_N@H(=g/$[k:*iATB.)DPhKSg)URWdk"`eqqC8FlJVf4aaD:0-C>XL%=/lSG=YJKmJVMX?2HKI#0k%5+f*chYDjbpB5bKX'[Q!=TXjK(iB&'2$)O$0*&Js?$AbB]p:p)$k=F44=.'d$htoF4@E**P^p5;,0.bHMA%6pMVpM2"<!*6(P7O!%_Vi`7aZ)_D;$hq>d-%Q#E7YB]o.TlY"(/d9kYH!8H>@qW-`dCuI;[thcX6ob$<]#5<g`K5n5f^#.i"jN):fZZec$,b%Y-LF6t$2e%a,tt.QZ?H[W0OF!Q+AY=!PXFml_PpF2&##:Z<_Y/QepX(A&TuG['_e3!^jS=n"j*Ugf*Vajo]CLj"V62i&g#$/EWujo*;dkI8Ikq%2)9jSoNE(Akm90bBT9h`K;oW'HWjp(W.7irN%NX6o?3R&)D/`XmXo@P&+BSZC-8Hq1IQFRk2AL:2@#1/"6PY6..H"NL(2[%_hJE>%C9]g2&6o2I3hHShA6!aLHHq*OK-!*1lSg:-708'[6ahM$5A$82mP!uUWcV[gS\e&t#O>!7oJuD65YL;LPei96HH(SR6r-_Eh#g:d%rh/G^_#PX;a$_+,Os9kO$r?3F,t0)i#Yg(V#2R>n_uBTFi:j(>Rd5KW\b*HclBX]o0=m4^3nq%DAZX(>XT":FVVlCKF:?u9G&7.r%<^;=P"VcX34,PA%JdB@F1nVfsmNs,;"rW+D*>QPLBIjkqXcAF;N^CJq_/Dd3T;DnnS*g%/C10I]KR^%VheM+79eH:O&,uG@60,L!%poOgN.tZZ9+So:Sr)Nt#Bo:iXU[W3&L"L=On67LBVl>C-p;)6n,)H8""MY\fDaj/F]cm^p^D4S'7IZqH#_"iBs0c,+]c67G>54.W%$bu(]s#rm@$M$2!FIBuBXui9pAi?Q$ljD8,)QC&C$L^D8bQlQke?.J.leO#'>1"2OHHu__l6JmTdHA7r)p+06ro(2LZZ-kjQ7bOE%C\BLrinG/L*q=P9&rQmX]T+%f;6qALiAb^$G8UMj?4ti_-%N.'&mS)pE<9fQ3"5<'B,5pTHM+@17Y+aTC^7,'fp./52MMOifOs5!%8T9a#Xl64Hs+`7^L/`jfNUt3u.Alq/Wb\k`!lAk`C%P%FSET_=D=qd$TJ[ft=IjrdVK7"Kl`NM'p=:a_7</W51CVb2mqLbemE97\%PW0[;BJMkr?imtFb(rj@a6M9>k+4W[kA9=B0#M#:VB1$55J#=O:`#D'3q_X.@(9r6-EQ4Ys%r!2/Oc-Ob]M7)ciZ(g&ScXlh1#%:%3/*q\d5PHn-G@".S_2d`H0lgcs+-CW%4P_cs5S!88t08eXeY_W8^J-#QkjgDoj?ipe@kjM>qK[gXsX&/pb9O-OmRnc4:j6Rm.cXb%72,K9s"UJMs$991iLg.dZgkd]#4-Hes.?HP`<0lW%D"XOn*;V_U\jB7<k[]&Sh1uYb7pHFgDpSu1%+h0/\Ut$4BR$"kn.:mhsD-n%NVFrc$uP=\(QFHX0[hVIk.f,`6I8<-6bUGGXFVia>]E:'R-E>e49#=;5?<'S`L?&?q!>&2IHlRolJG'>7^'B*Y_3M*,CUaVVZT-T%@"u:(Q1<&$\)Z"R8i*h3ZQ;mAli43Tq$7/i*p2KH]IU@U\L'nK(ui?O2-K`bTP2>KB2Fo,<H>Y";Ab>uU;-%)Gh5lQfZq(p6mYXq%Ej8Nml;#A^^IJI$*%]-ZXsh5ToG:FqltYZ$qQsF.)dRQS_YA%QeRIZ%DI%FPJ3Q,eXf(qZ'I@Cb)I6t*>BH9a[?"&_j"Ugt'hH2&%'^<D@8A7=PrbB8OHeiC[hVX!dG\+-dTp(J;/,HH7M?l7#=WG.gN@Xb$j!A)lN:jrek_,kQI*3I%1ks3rZutmDbq)`1Mq&kAV7LBh%drKX9S5ESa]2QWK/:OauR`)f4(kV(d]VbUH$Q7@ul6badX2)L$0tT]+`*%F8<m@gD5ki-K^hRQTDJAf;A,na/<p;_)_r`?<7=P@q%[uRuI'_(H_-lT:k=%fK"gjC@e%Yf-%a[uX6Jg=:#C+H/CB9un#')c0f_KZ&S.WFn.-IIrAB#-8i-n%cCW0i$.8quQ\W\O^ceeJc>%'a%;Lpot!c@4_o-X);i<*NspKUF&OiL170+kG*0D6sJu8V(d!-B]-i%&J\BJQVZ+);5cG$?t8_BaTY[2!EW,iNk@`D("AAm7T1qV%KO-5:dWT.U+p#e@#^e:OI\8BX&G8/[Y-nI2!On&%A[g1>fZABk"-#3Y)$35sD_Wf&Y`l+s4JHNVj^un-8![7'q3KEjlbAP`g?cKg%^8S#W^;ul!Qs7cH9$fnQ!G2bd5gIVG:9+On`f\-TkB@F3"lMPt5RX>se;nC4P#p]&=J1^P#B[c)4/2=-M-_!O.+;fE^$^b>(Xhe1%1Gb%D[QK<>]MLK!9u,5M[)<:&i,++g=#MKU)_a-8aL&\XD,W6@=W:"L!-oLkSoZfU`-W)5S@I1\`Vh!eQt;Z8T*o8Z=tKDnXW_sm%]=jTN:<Yn?,0*2fe7lU>]7B/A$f7W*Se)*s#.U%%`cHSY$&,e:PPjP?im0V$bf#:hApRkYaG/FP@&X>&J/_(Uf)$*:7W4U.<g%V!%Ibg9$6]0;(&FiKnrfW#C;SKb9:O1csNGrE`(FAVhG8%a#Da.5Tn'Y'!a^.b/l[djrl3E_-+LAWHOu$:]B!c1l*Fq4O3^g,1WNZu>%d.j9_OIMteBZNP3;h@TfqHD3koBpkGDBB?'hoS@*&2?jTo9cN@DdF]rhU0a&ge6<L9b6=]a_4A$4U?hep\OTHU@[%j_euY]KW4*j%m\*RN%4bpV*`s=">qc\MK4KcC2p@qPH!RqV1,,cG./+qeeL,d'):*34biD>2]d"!:D0+N#e&,Y/C*:>H41sQpB@L-jZT:!"BE^`2%R-nudn&>MdEL'adGu+\&b0:1B_&,06*.-)n3EQic5LB5%efHuGU!l'Cr@aV->N$`m2_sd[bC^(]XkbFA"[Kg"@Y2985<:Fd:OMZ/%[0_fp!1(&/j@t!'n6C?Ujk=.0s7O.ST!Ilk%`GpqE+K=Q%",'^?k+e,FDgbfB)ND"rnDA9qQ8@jkid8EYjO8s3ERf_fmismrYPE_%gHbc>X3lFq^XL^M]J:O$5`#C9:V&d,'f]1Do,^'ZcEVT.nscLtT,B:np6N8`)Yi*'k*Ina7Z7V\&a-H33D_J@[b$dI=b`Zsfn(eY%AAI]2X^NP^8>6?t*@X:M9rK[d&j::69[lJ7Ba2!"P1CpdjWYi)=D0D@a9C]96!*CX!?dmqSJ.XeN^bQFR%;kM"`Mpp_n<rlV27l*%DA.]lEP[UF4k^FLmt.SfMo'?g+cDFoa+?[JC$)S%A)TP03e8?,Y%m.'T&e@sj.cG;]a::^I+^>TRXHJOF5'F:k&i_*j0#";M`d43%Ojc_pTp3+t>pZLhNnZCsmRN0=l8E6%6_RG1@.W:OOdA%#?[VY)l(iOFVV):kYh7D@<?!/^\liT7jnidR)5<V2nR\_mp\Pu+%8bS@%)rO0V7=-6T;Hi1shm9!mT/SQ1<8#K<F7nWd78DIRI-BoGq`T'a=mYr-ERWBQlms%s7N_)+h_M=(s%sl:]O'S\SX^DOdg=SioAmUY%FjX>1$nZWrXPtVO]_UO`;`$R1:S/<<m+3`]'n%5?jS1j`pW;\r3dKh3in=Etg"aX3@fbK4J+D3DCKo@+q``1[IA_,rLZe)5D6_-r%SXt;(+22s]^-\BKAB#ZQpLNa*T:U/MnPIHWCNo(6k4Iu6hsX=e\$;hbXF>/N8KuN@1?5^e`;&A)OIb+/*'VC6[a%jAk<B6%=8Lq=%.ql1X/frp!R<d[Eo3C-Y"JW63bAf?W@#)Q,e%[4mP6<>Cf[&HZO$L.PK8r,!M*YU@$Zog)akKIdcV%oKdJAgf6+^l-kH:#H:BbZ!%begkp^ICssdG3a!PC+@_-E,ec4)Qr6[mPpK&bd^mP1RcRjF3-QPfca+&Kf>fO+SoJ^7X9E"5W$`dH5^_&<mHHn:=f[<@i<fGB+_@%h`[rJP5ghq.TEqC3H*l?CQ*",f>+uDKI<$7GcCVkk`TlIkq[N=pqHX@,:OfFmFALN*XYlhhM;HM9*gX)b6Ft7LN$DKQHaV-WF=)^%$:S8Fhu-5!s6[o="-oKF\*H#s7X>U>n[e\p+]HQqlhOt1r0.,*:Q-juCoH1TE5[-\$sj8]ddrh84_JNKr:a,;2u\g?/qu1ZW0eO8%8K_F+1E(*=()"8^o4M+Ge>hq/1%-#[38+Xkk'.t;J$nq+H`eF%5?rtAO]XPjd9<)O=uWMTB%L"HQ-hl7LhF^S1t;`NWT@.rHf8OD%+&SZPX#s7,9*[0Z,X7L34E-)1lcCd=+6p+/;H>uc_E`(1F7mMT0pSCbE]W#U9:='7M)cpI=^HIkS\p=L6R5khPj@Z\aW[B(7qCG3%dm`HqdZs]e1aWB%eR+P#'a12C5T6M&(a';_K2Bh<TkgR/gutfS7PFTKND/tuH;]ei]f^^B[!bh%pq4;Mer[ftF<tS)B3MbH%qq>0%4J/aa-X,0^R^.79G'"!V;kODr'Y<,]S5m8dW_Y:*q="dR8X2Jf(;&'LkZ*+7/EF^rCrBD%`!XO\Q63dWBKkprFD&?iK3<@YIp?Mf%?dEB37)^B/YUk#8G?"+f(OaObL0kF8mJT-dnPm7_D<]1R*T[Q7]D1Bm@,^Xd/?!Lf:jHs_Ms8XN1K*_7q-N:N.J$s9Zc[UWR7?Lb%)Z--&P$"JN'*1@\ShFu;A9Qs;Nf2!ll'1H+Q\N+&V[:Qn11a/m]lh/:q=>lV1odIhaj*n."R+7XNT[QBcc%b'"HD5%%;3fUoJP+q%]ZK\>j-e58ZCLMRQ-VtI!nHlnq6KF!Rd4!FHAX5**eT&IRcu3F\^?S`Vmhu)Wo`BjBVg&Jge8clLl-7VKTAEbW/uW?ERVX\F5OJ4%Y,_bSlO"0L2tR*Ci-0/)c0?2#+\0n4o/S+DL\jYde&"l`7;<T*iEek^>k'lT6%8!9'b'1c00G#6GV!1)'TFF-'o9N"jA2<g#lLbH%F:r",CMJsM:o(f4Q+.SWKDYpc'&HmFE$s%/=165cqf6j1OI(GH:^i!9@:Nd*Ad-?7XD1>p`LFtb7c"VmgD-[oe:BeVAAR2B?6".h%Kl<lYQ$8U#(?F#Bd1@bCd8"3Vj`&B[KVoY_S`fW?"1g4W0=ImrE_6bNd5Qt$O,][d)q=#3"5]uj%dR"-1bRd,978g6oPmh)Va+o?%-u-$FL`l9\e9Ar#Tkl"U$:Y0Yn1$sG4:pUC_@6$mfGICq,q5g<%J,V,kLucl-RJl2Pp7s>(K!J+Gab?UahCYXAIKcsL+o\=R&2.3%(lD?g3E[(beLFL;4Q'D>o:Nm=N[39oq9lYFW-B4Z"HcS_)>=;F<o@L?*4Kpi"@]+1ecM#3'bl0$"]JQ3;]*\:V+'XoZlUah@bO,W%^k!>#np)XTRDT_$WYRg;gPMZLmJeBo?6U_`&ABrY*=S\?,lMi]0ZoA>3pAt\noN+$O>8=4]W1:E8TJUdo;(h$\aq&<l\`"sldr9u%C$JYWEPuSfdG^&I^=J:1I&6CtQ$4Y2Teh[R^6WYc0Knp5Au$?&#J27<4(?o8qEBfFkrJJpE8l0IhtD%mk^-NbCrB!BAF:k6m>^\D%]24f]Cos1L>U#*Fc5UtGZ'qbtEn^^Z?K<l^Vo?VOWsNIt3<ZP](4k5[>6a'J!uE*X,'c:YoC)&;m-aBd95.J"B4m81CeN8<c4a9h%e/o@GnVL!=9UQuT#Q'05]:NrHfK*']M/Q#NY$e=!p^W5)>sUUH%lc,m3u=Eonf)fhQ#+A>!*m5(IJVKb]skb[Ya%r<PfTd-S`DC5%B)>Q'im1t]8%U7Vn\ibtbJ;5\dqUC3H`-qVK64+jdIU?tHDVku[jV6QlngJD<B1eg"Y2s)Y2r:i3t:1lT1#rI5()t)9$<E)4RT`c%h'nhqlM*P7#6pW2:=C8/GP#CMPPrL$NClFfik,BKEmm:T8SCaJJU3`Sk.]\g#sc&M&OufV&)Hn[ZBJK'GW5;(M!k]qAchcI+5$sC%Bp0TplqSf1ZRLH[ksjWX8$^*EiQX$5=g[tomQN3<k3Ggc*hUD2^@Ij!?7kkQZsUMghUg5!b13*>nVF@&p<<J@o+AP&_LncT+O:IS%F!<YJpZb.hl(=9o)U0*d[b.uq*tDF]aC:TH^)ej!:u_35$3Rd\XtDo#e!MA7n_CORmFj="cA'nQK(M722T6NGIUqFS'qb8o(&IH]%1[qd09f".UjeCMk%9`%jY+EFGndae94#Mo7Nm%-MqAN$THQVkOe%Op,n`=JF@JYn3@m65nkDcuBfpBH^gn-'FiFF$,[M;\F9i6?S%NKrDF81t_"SF\P06@*'0hNZoj'[)a%=%djNL`kpc%s'JLNS/:s5P2X@d8ft`iV)?[;%pbJ=gRi\R(3Cb%?dPmAW!N6aI)@tk\A^N%R7`qg#WhdeE];&MAoY#iIa/UGs0%6+Y'eC>e$lQXr*4W#S"cK,_[622SEB'8Xp;72ItNDdRrc^<8DHAHh@#kbq^[\gN,7aNm"\N0%Z+`W?"0EM&ZNDN5f4`GI'mbFtZ-nBC)Z(8)"Shf(3Wb&I>rJOIgL?La7[(Xi?21Ak3aeF^+GDUn(&B!2/JE0Emm-t<`Ah(P#9Q'&%-a+T:o@L>=CGu+cm*FJ!l_@.KjXHM^V>"YH64OiKW.7ifV@#8U>R'cNY>mM:2B'(<B]io)$i*ojr2a&fS=[4]6_IM()E[QQDk&GX%ADHZt`5k+CGo<sYPDeC&o1NsCnN]GqM)O"<`uQ&?V`-G5b>.aUrHPbSM3+bl`$8Js<@p,7iKi@K4i!i]YS#KjV'OrO35=Ign*Tjg%Ql%pQDo&7@Ar?D-fr`d^7D5qgidL@n-<9#;A4<=bGP&%f;,alD6%?Bk3'<P;)dSC1hSfj/RP@KJRc37QBsr%D:q^dB_^Kd9>8O1g%bU'`*SFpk:GqS4HEfX:r?,q!u[j],G?GUIWBttjhIq7+RcOkgPaSW?_X"$^LQ6-2naCce3\Ld`EPPJoM//c;%0RfPGo#'VQ+u_\G%$NjmoC70A4HD*'`!KQ8VMuGJ\3t.dOPA?"A-%1n]at7NQZ_TD%pu6(bPLGr`qqs(kN.2$=0D+O77F1`fj(Q9As3]+C^1qO#X2)A$%`-64;RtNmHF`f9GT[[NuW5TnL8Z'kW7,n_m2KnZ/Ha^d?$6IeSR`0<8pJEZ3*];)QQfN99*ggJ;Q1ugHpNQJ=FknVro.(\:TSZH?%dYT>tP`@>`N\&s7LJjdMDEM+<7J/<6?Zg_<R<]DhW0Ln-H9:_oU8;o,kN/Ei%MR:4K3<aodJnRONplT3j05qW[@N31XRlG2^m@gO%I8=Cn3IJ1X-cL@k?dTJ)od<+,ZSS!Gj=;GTbV9QSd3"t^WHj\u-V(_UcBgat2Xg#J$VAs<r;h/JrKEf&;W1?!\NbWOD"<a[>`__-%EZmL]C97K)?WmjtHc0kMPJCu-rNg#fg+$h!oOF../f;>-_o?-9*4aFZd;q$$]F&P6c[-?pGAdHg19l^Lcei5a$;\D,V3IMT'-eRW%6G*3:(KPAGU?K624<`nY%I&]34IuC8Y/8nfer`8-dhN6H(JeEPQ+iBnOP(bdfiOAZ1:960bG&AK_7)]qec`g8?QuJ):a$MG<UQ!D%+Os;-'o_9FO_OoXC!B3s`Tk+_&'k9^cgT:)Q6R&[hA0N.g@`Z61Yg@O#R\ql'#P0ok\iB<"RCm]-#Pl^f1`5fDDNT<7Vm"J.i;WP%kn>QYimp4Z:fkV_@&d"scu1`!I(Hug&Lr,DaJ=`5XAir4Vg(?;>8NmSRhs1ZHUTGce`(q!)GQi4=+Xd$NM&.eW-aNr73gb1-5j(d%ndr`VfgTGLe)dL]JQGV#BYAFEmM1%9dNQ)pq%b41K?U\qUW&6lZj&p/)N3l1n#cNs"A<I7(@d^Q(C]E<cp*B""-5=;2PsT429Mp*%-2LPX<3`3G0q=f,KB)qO;;+>d$fDdWG/:B$0:`%dg(Y?!"]*D%!<R`F[,qgk?Kr<EY]9r0Mge%7:[-rIke`i@g>M89RKdd;,5dY:%/&XZ_#pmR)`$P)44*9`"GI<Q_EbDW^`i"Y=DpeuXMOeH(!]i(l9h1gGKhSSdY0`';YNWXh4m'h@)1+Xsc=bMeL.`":oeYX1aK%M,%es>VqXLB1k-3^Ji?gbO;Yk8dM`GeO-C=Tq8k6&"K`97S@R`H!WDh>CQ//H^0oG!;a\i&-c^Cfi+@S.b-i"d0nM#r#LH(/ModkEC!%pKY\+L&UqEPDT,5-c!i3&4TXc"k1khcA!Zu60.Rpr@o)$b*@$TYCdMLA"BEZpVDo<V33qQf:^Zt>njp6L%N@]!uRTVHOn?tPkV'd%>5i(7F7+"8BhZE?$74JU::%+dPC2I=pmu2kAs^YCKbk<:)8O0?@MKVLrO?e:rEL-ifXuPNk\oZ9;-f$I8lS],MEM1:QY>^VPX-pg%4+6WbHq&PjG+AG)qdU7?U;#.'4dVSR!/T=N4QT),pB_8W.P2$#E`Hk7pOY%2*J7O:T5ZLr6!Y3<K0d8;\GPKlMkBJ(0=9'CJMbps%(g-0('^Nq(^'cUmhMXj]$QsrP=3NL;%)4Yed4E`5/Pqk3)l8SUT)u?+@+p1?`74*9duE_gGH+n_FhmAZ*+_h*k<eoal%&k>,bbek%Su*(G`5HsGZVqt!._Wc(%nONbU@nrPLUqtma^SVa`q:`5%M$[+o%poDb`IcGe-?#9fa"_/GDA2o=$2HrpZ3pd17k7Kn/'`iOflY5%]RG@"J,f4T<RkTedW^E^V!,up^)0MVBX]"]HtDb&B9@"dSO]F%eoIE$[?dWP4[7/nei7Ot+8u)Ge"X13NFci>pCl8Y1Bn&(XAn[7%=\K71N'j&6Kp?jb4!0_S1#I>OoU>!?0.Ji`Sd=e+rl-iA']JY10N;qJ%ZnGG.9=&5KQ6J2ejU`:rpYq'XZYp83C>KYc&h\b<^I#T%b6EThYJLH>;;'!oi$bJ'j?T0@3$5\moWIf!U9eEP7\@]&2AQLa,CF>gH6Bt)+%2^u=(EZ!%(O"_<'S(AO&"TX\>IFEc4(1p5Eq/'%qgR=!F:oM[CQsiIB-1bBDF1<bjg(P;lqFMS@WN.!NpelFqt:[m9)'aOL)+/j^:V(/c+OWKrj`5F+*m3`3;<h&nW'Mdl\U8MSc&bl%>cqKZE'=3(PaFk9geF-Uak*Od]=<!tOE+IN#$-scZs^p)E?Cku*TrCh;F3^1@c(MSg*jja,I]=]P*^3:nkqh2GtFsWV$dGJ\P/j$%:8X1N]>SdrA!Gd$SIbL;-0#+QSK;c2M?[?aA@HT`X(]gmL>cP#6qiTY#Z[Up4s;iMC*l?kl,?XY9e`aHG)@`\b.VAdY@8EN.ckd*%S^Z'$dhVa9s(jD$pbTDCY+Tg?<bc0DW:eD\h5jaN.M@X8W!#O#Tf:Sh9s6AQP0:dBjqXr^TKT_nkobKYG1::"M-WjS"+&U*:KL2,%40PX>g#t<-rnM=]-%9Je5U;lF9d@&&\"+VS_B%nf^-TcG[WF0hN.6e,Nr2gqn+X8Z.j7\3*/tlgA>DBJ0nM6bgQNqmB^S(QUUkq-%pqr/PX*ptIBdWcgE!ek^384W")Pa"nnL'-/XXN4<_g5Us2dXb?9Dtlh-ep-81C'qt1C$,mEQr;89K_QASQL]rX!L!,`gL0ir@_rE%TuT<d'JUTRa#$Dq1#bCHb$:O2TJr5N4pFAG)^cQ^9).<F;j)^Q5;u9-kYE(a@adf*)>G#laDZks?fqr&`fP?q[bmY(6<d[[rF(4:%Y-a];AM8+IqK(5DUek\MbJ)Ecc-^@eB8+6h%I3R^ZH/=mIE!].BfKJq#?/U'B\$VD4eYq\PK/gi*VY=CiG%;gqKk3<_6D(P*d,l0%n:m5)$W$tIj#U,EO0d4B'=OSUqpc^;R3^H1R^GuGba`:)EmObhqNVr\g3$4]]0>4N@Bo/<jMTm_X?kHXKu&*84EG2O=G3(C!sDcQ%qkd<oY2,YpL!tCU&"UMDjP!^3\T:rFffZK-;q(C/3=dW^G*'Q$Jng226#YKE)l3LRM?fQ4>Ga;XE<p(Q[:'!rk74%dfFsCVV5*GY%_eF>*>qPX?$re*F$hPF0WFO65iUdBs*bkU2o*u2^$=.pbS.(:U_XrTlJ*"&6NB0+lA8IVkL9!%63o?6SiqeDXD0thq>9,9"_?Kg,%B$m$F//iXXl8"57H!B[m[Smo[F`a3;X2N^[jd"d2&^%]/Q=D)&[8l@fcD7gXL5WU)i8U_$9LCb?#PP/qLMNOH!6U@".i7SO!he\s%N#G#4T@6-HM3_%&mVJ.?qH"iRR^3d-VKq'j2)oCPqhEmO"o[+-,Ma_I>cbZHcgo0`eZF_X\op6(8aR]pf.n`bfgebWL[QJ^>^0ks%Bqt53c(ms-.f:1W>Wqc^7)3m0p0<$JK'4-g9&:qIie)UJ)h)`<]P=RSq-gom.A&LN]4_d7,sJ.fQ]9(QbnVd:g3`ok_d^*#;Nmp$%FnZNXH,%@+2Wrboe)n>l0):.M3'=iYg-]]GllLci?.D,;7/?H:$6^5G(?oKZ].S>GX&&Q6[B1l?btn6<2I)8l[Rul%Hf6DH2pq_M%PYAaADr^Y[r70E<'cHUU?*j-7meqI#0>)a[\thD$SVM&Bf0'XdLT[>1,H,[DAa9Ttnm/\LqL6'$gDRZX]Mu.MF-]r^qUsHb>&*:o%/ckF1);iPR,HL#\f:a9K0$WKIV%0&+A&W_OElQjH`8I0(h5En5BAV9<$m<UASlEgT*b$Sl<bOBl$9hac%cM&7$LbFp!/9lfQ"?<j%p4[e,W7QhjW9KNW"9r$Rha5Xr<NdarpJJB#$e/XH:u;;C"BGi9a*\"P:YJ)&ZEDZ3jg;#kPWeu$A0mla]+Sp?FW[/=C'+pUSimng%g8u^KPN#)'(F[usP-(O&qAM@WRkq3?*MDd1U,]f$C'-'@P3:n#VhK\*lmf5-WD'^A#u&%.>+ZW[0QsXm,juE<[SBg7:mVNf`=D>t%gVMJjklS)_`Q"iW$%]m7LI25%*1h;=H9aR9qq&K7JKc.6ZVn@RM&+E.9qWS0T+*rVjg1WOi_9fZ`Qg//gH0cY75qUMb/WjjY11eN%XJuHRF"pCbFFZhU:OgqK;%1r`hrnjSrCRbSagrhGPN"-2&)H@9[=An/`V;n1W5Xe5T&8,_Ou@kYD42m/T>#"5o^7R?:BHSO!#f.C%KuR!T">N`K@G3oCWitBR8[H56/\Ff8$D9%$U3[gj,,"@`SsC`gd89NdU]S\S9;4HddX5C\J];R8+$Dc[+%0sLCMEsR3*n(`n3fMk%2>Tp%DhCnmT[cr='%-gW)BrA:9pZ285iKP^=3YLE26$uTO][TcJ[XdS^m?+hCZ=m%JY6]M[2O6O3c0(BRR!KmO6=)>T/+]M;\`+3%Ka0[d?G)UHg-G,0l#0e`mF2:8hE/9u"Zf4K*B/3Ye*?8R(%LgV$#'LDGtsZCO@`0>T>>0<$7LYGK0<pu\-(GMP;XAt'^HD8e?^;T%2(IuRM'`$!2"@?l8S`AG#ZAcqS]'?a^A`5K1BmrX*%>N'3RcJ@M8cKFJ9j.#[2#pt`jZBWRV"9NR)Pl8(@IIk%s2sU;5llDERs*%%L3d2QDNsGFSgY9oM?p.f"dE/>g2.V;K6B`=!4KC<X2<&1mth-m794dcTI6k2(8i4*<tEi]*%84`gSio-O+7i[-pFk&m-A0NmJAo9%F9Bl/S!q,$;t((A>CEApC89e?6f"YJ>6auV52GC0J1[W&:[@2&mSfjA*-anh=_at=!MZ#8^C"mDDCG9pUX_)D3r&'BSgm50ei"Q5%^O7%^oBSWCXXE#;:I4]DO7BaZgWcog<rZm7Z)HnNAQE.&7\X"3;a!<4ItY;ge:L.PNcJq6Vb^su1Y#D-`L\8l:4p%!?[;UJ0B#un%mSfe2qnuXdJ,@,$H8^"/qOhu'_W7:\8JKp,*d[I$p#!LU%j1G9B&fSH!QE-l<,eQ2G3pYsU&-Zd^0Gag-tYR8jMJe*%\o?SZeNtt%GhQXd,bE*'FJ!lB<&H=+9]Pq;USrQeM%pZlnV+X.6u7ZshmpT]]:H"8/i<#I]ZnW#IR<2&JX`S8.=K[h?[8*BR*TriL2Wo73j<Yc%MU-4[!R(`qH2JR;E9bg>V,%3RbFT)Di1tn)n[kiV6<uApPiK(;j5$9HG$W\Je7m9\*D+Q08`X44P-PSQ`o[aTE;@/dc41CqR$?`]%3EVXZ&u7-VU.De4Fb#(M'5b89[=BH:4OehD^oDp:@D!$6""g(X4Qlih>ke.@C#1L;jaBkW>]QL2k*ZWkX<+6L5R6K8V_[g(U?</Q%"soqp)@q>.S6)mmTs%(]+kO=id$%qjY6u%k%Pk!lWqqU#LJJq`m>_4odTJsGW*kT0ha+<HS7)F68QQF9_goCDPt/g+YNdXD8<flq%L7W_1Da*%1EaK#Ee,par#BPQTR`)*cOYK]D)etPEJ3LG0K!sGK>mI6%.UG=9`n[2DQ_&8_j,1?9KF+ZRB.7c8/,RE`gc7+'E,X\[%6r;U!j9`mGG'UA$p5[#k^?(LS?bhb';'Q)@:kt\+a@TOH"TY%nc%W^(BFhtXI_HLG2:K&A8aR*K@CohA81gBb(2n,l@WYEacqOIY%<?r#@M(!!=?Zb.b5#+Q3\E3!XkUuMc2,ADA*+b7_Ek8/H"ZubC]j4aK,?88#Ubkn/-+shb(O`s=j#&r*UA'P%IcW+[[LjO0FJ&/f%:Ti6_i7UPqWp1Zr0guW#LW0TL`m8X6@f2=84peJ%c6H6Z:gg="b`Gr(`t/#5J('Ij&50bmJn?B+>"uisDeF8?ZS0D:4'OJV=V>(E%2FGn4B3k:VU:_)o4,gtsLJj]\k5;EoFLTo3&5/jG$?%B&;Y:aRW^lEh1_pjJUXAcj$3H)5.od*cpRcLrR?gefO=,KoJ59hF!8W+i%'kuj\U"r4iH=(;8.^a+EQ!?.AUMIT-S[ug28!T$1n6@:-DiI<t+0KZ96[CRqM@p[=X:%ao03-<ndFVe"_HYl0[R5k72b-O!Sb>t,%kFreCq"u+[1j"M0(m67`hWd1U0LiBjeqog7@RknL6J&c0OEP-eQhZP[A%GB;ltX)sSs2?0\LX,14(G6'3OqY^NQ2YX/U?jkY6FH"%K*GP%:HBl'i=mgh`IQ[Q!L3hn2gD*R[@eRZU^;A?&<QAokP\`6V1[GQV;',-f>;U>Bn\!*(Cc1J/W$eJ'gkmQAqcXO4a7_]PXp#l%];RkI);0rf]JtbM[&,.FPBS$S5lP9,PP'SRn/M'7:Fr?6hB\Ck54Rp57%`\hQ"^i&/LDKnP(>o#CN-TJ2)fdh8m3R4>fglgq;ih<%[i68%4,i&AVmc-**8]<`K?(8r@t?d)WE`$U)^CA51%L\GUQ.pNi*d>[Ve)II]UOrIW([U>h82q<Z%T.pk==0:T*NB)6Y=\[l`o!*%D4;T1);*Y@3@ZQBpd:itF`k-fUPr8q2+B@u]],s44Rq7,F)KS)OP,q7l4A'Ho3a>4TP560?TNaTnmZ'qFBq!D,,1p0N='CR+k&kj%_m\?Y-<h`qP^Uq<m%1:N)H0TQLTYjk$pCU%[pfliPr$a:Lqi(_fY4\eeLghYK,WBsq7b_5\^hFUGP:2f$RO*Y1Q<)<Bm0`r;/AV\%^fK)C/Xoc@mjmSsDZ7A!s+4=5X]sW\=`ttbf9R:W*R>9KGm06p&$GGci,ST`$lqRY]PV@8eu@\n"7NEeKG?(NM&"a.=GkWfSliU]%\4\.-EWIP+=@p=(\MACF?`pkbh:n\tZQ#`klUFF(@L9lWK_*D!)pOJGAq]57D8Bum!_e8XB/eIlkB>Zt]'uT/(35iLDcl?q!KPim%H<T/g]E*Da7_@120'-C[MZ3g%h.V6Q1QKn'_h=>1%uL2Aq#q$[9K6C&Lk4d.CCkWqi\_XE/?&\>Ud8]e#<#<@AOU<*bD:)ARkU^N%@rV,!3Sg6Lo%4,c`us)IA-m2$/og?A3'q=.m5bhGf+Nk^bHdk4"8CdGWs:_#Yo@c\G!<*Gb^5g"Z>>S@!q1r/hOY&SC!4H.9f_+u%8XP;d=Y+a@WD:L"X_^[QgZBZ?bduGolHj"*ErX-B=/I?h`_s8X<Bs1/F!sQ>@$j9\<Ddi/SPEZ$'*P[H9Z1.4A!a6KFn0VF#`BC1%eF]V#jVjbJG*J#_8SjW,ii&D8-'3$K]Lf(;\W=C54$1Z5(lI0B"`@#E6FbJi.]u_>]5>qNY>aO\U,'KgjHtpQEU1]!))9o1h4UY#%>19/7)P8W2Rr_N('[0?Jp=9/Q6DH[r2DlD;m@r"HrVTjtB.'QXnT6W,hGU'>?ME&bcra<*26f]17qORr4K.!E[Zm@*NhOj.e<Ckg%:YA8*m%DaJ@McPF,A8p`aq<32EB?dPVHA/Ta6Wp-$i6V=fhr<IOU&!j3o%)>3/T:&$&:.ZVEt7[GfTrfC49kM[2eG%/2K,QC:u$V%_!e(2;.KIGV(*d,fqrATYq8_G#rRA0.D>--paCFJEFVq2SqbqTc8O-X[hX@p'\YQl$Nt?Y_kGXdH/IJ=Em];NGZf5J!B51(XBMm<%#PE%W2MAC7m/%5=,u4StH[IhM,gXK8[8UCmR@+LAp/@@79qdT`U;hKaMpIT%0&1L`K2LALUnp/2Tm$.8n("P5\a\N[%(2k7n+HCk%R:p7!ChPpIau%>k+g[l^>j.C665c$NK=<'3^$dYT\PP:fau<+aYQ^UqTWYAKQ^j;1<5'8?/91`tB5CF_Z#jP<))_,!66ONT]$Ssf%CeIaD8Co=?B#`U@f3SnLU(1[*cAbk#Te@MsIY6#?f'RQoPVe%mioKLdV0::5m,k\)A$r0[_g&KT`0BkW]$lhnc8B*]^W.5q!I#)-%0&"c<g2:,.8n76X)OI!qDbsqSV0\X;8WP_D:Y&Yd:i^U%+-<qgDJMqd`'F2+oHPL"JsGlE2P`$!-94C>>`'De'4"oqcp1R*g7F!B%>:qsa*CfWR`Q)ROYf]uSbf=9bPsK&f+")ih3.oLc5>D]ZE<[H?"+PtD3o^W0kfZhDkWFS;FPQe7GRg9a"s(u)4@0P6-;\slSOU'G%?9*,I)0@iBn-D$rRR"h#3l/Be1l'@9K+@@&4[KXLHHV$3c,%FQNfuhCS3\O/a0t-WWAZ$fB:)sW<S$lp4n/<95]'lM/4p,/?9fuQ%m+.dY'YJn/'Pf_W?K@):Y6(QV,/&9pCi=@X2V.X'5Z;a%g!4\CW3^:sG+.5>bU%m!kM(V;au)A8`jY6Og<r45Ji/ZNB=`T8aH_Lm%QmV[\c$aVsN&)Qb7'6qp;X,//A`ojLPIdX\G0MFZ%e#ZJATfS[,l;o0->fCBi3bRoQPstKD'Jb_V/*Z>]5lNJ[Ucjq(]J!9>W=!<%/9OL!fga.Xg6V*6qc8eQD$bmCG=6Up6Vp_H4Gt4!;f9ElDm%`7Mipl=Qhb;eB,/ZP]uX+*iq@PR>"PSQV3oErpjPo40U`B>!O7l)%fr@TH4A;Ic3)^"k6^uL#8W6La'76ob6*HmQK:FDrH(3\62/Si9[7_RuQ9E6boD%<Lo3W'p3_cEI.JGll8M/GM^e`sf]&oYBFQUS]%EjfNi]\-Qn-$9?31[!S9=DC[dQ4p%BPXmN/A&bDhm"?0:Gr!T;fqgFRXE#/s;utRf-t][tZ?%BZUE)TS<T&(dqGHG$A=l*=/X]l+%CtVg'^!4e';<R*YSL1`8jg;CK?3;S01EYr/,lZF?h:^t`1LhfP@b03_Rs4SucA3kf.gY/^KJY64UJWRcj[a;]Q.pA5&1=YZX?iGf%d\P8+$^BYZ?1takA&F/P@sabH*YV[sb3;XHE^:_o3V#Sn40!>)%.$O<C8V'iqq="[f!8^Sl>Z=e:>m4YX/*h>eOu"Qd5niV;$HW/%^:ui)^9X6LB]J/Z3"K&V::l4(FS6jYO1h_ZNapEb^J_5o:`=eZ=VfXA,/^1_R?*<Ufli7o(neeTZe8L*J5.F81)Bhq3!E2A7:[)\%WR'u<T#E&XAOP\C3"[$d4a<8P3AbP,].o>e=E[6]+Y2`&7V"FTIHVU634Nb(Ll?@uL\Wb`;gZ<>cVqD87RRG,TrBhGpWLl=)j)kr%Gt3MoRiorKjI@1g%+X1_F#8m<X$hB416tceO_rjeEAPTifQ*n0I5[:Q=?1URK+s#D<XoW)Lg>(>gXBr8CHHHBf9fnXpGPrS(Ug0$%ac&?WCr't6FlkX-lL%J;H$*?clYR;?+:I=fm?tgqK:n#];,a!$EiYdQds-:YR[E<'3UaQ4,7!AKEP@f$,OX4[E;Q4k[Tbqcr\!DE%k//4P6e,."S;A8d8'$J'o?0Tmgp-J0FAE$&C-J0-DCC&>NgL?TII?=(oAO4q(+/4IIIc>r=e)cLIE0Qee+(D!Q?@5J'8uV2(H^?B%a9QETUp4cNAl%K?M*6tJAH-XhE-a[iiaaF.K?X_XMXJbto..IY48WSs.I8eEcCm8l\.t:dXM5!hqi5<R>c3&UY]:8e\K0#`je`k]%fp5#G5mWabs(I4^\>s%fYO)&s5rk5J53a1>UT_^[`UM:)f&SF6326/`@Yj/cYBlhh^?q:N>K4I*jk;^a+sb=n3*6Sd458dLk"L-)%1&YZb,;2@SZpohjOh`BaX1H97eodok)6%O=7i2O&7%Ll-5Xm5K@Od5a>Xg2g&j!sR&Md7r-a`Ek<Mi[ZNg#V%FJOlFVk[du4rl's%ou[+dd'A(JHMLd7a$;.5/F9[aLtd(4co;4JARdk?:LN<#Jak;l#%Dha<&d!uRG#u/:b&"7=jY2_Ku:OO-RPY[TN&GWrQ9OdiAT")%qBo2"FJB159nbB^O.#Uc2@^>U<!=3'-Q=<pm<^%iQ9Ef/O*%$5D@2)Y[mq-,>WdSCf+\IP+(E.Kr*.%%]"uLJCim&>^Ej)iolON)%IAiP(e9S5EP+,H"RGeF05-_W^5r+8CX`9frb`;e=+Hmi!I.R5qc2795Yk^&j&"E#7?Jt6@c_9fEFJ!dcIAG8ei\rc6^6(c)kX*Si%R5gl&.[9aIM?GVf-1/!2pJ>32a_mdc.M::X4%l08)^W,lI<'d6A_;9keEC5A.MUQ<kZ[@T]k"SgU[-pRNAKpUG>2A9kZ[Af*mfIU%/f)0^0AD`a<L)p*Y*p,WW\74:=&"T9<F6Qo2TW*)!ak5*fFc(^EMimqEdH<(;'3@eG&>,*4#WlF[,h15e-1_IP5WhDO3__I[-H!A%b-2C*Rhej"G&1CZh:GP`.NK>@j)=i\\8j6TR@/@Cle,OWVcTd.jRhW1n6F`%@eblE4+?H_.7\:oPp%WJD!]q>d]g74^Eq"?Q<Ua#%X0G.dRbr;T^Y.,.\tce6lu[<8IMqTkg"^YFO-J&uhBg?@m_'\)-948:9bCZoh^c9RF@l?V\NQ[+H1P5cNVC>`HdUW[/sjSl5,3J^%F>cq\8)a0O6r(4@qY.`"NmthGG7Bp76+tpVZdc8_;F^E$m3F>$>HVJ_h!V2bgssKB_^gR6c)*QJ%V%\l:<O/E7cBAi9rF7LVggnS%^=dU30gQh*3?Xed)KX$i5:lERlnZ#gIdCl3%C-NLkE#"u9t0j'+Zj8al0_D2C,VX63fRnAoa'5m>.J_n.jG:2dqQd(2U7"<31EYn%f$6cVNgNP=A_b?N]gp5Be&nN9fK4Ce2P&E0`+dD)B%-#3LH061S_!SXDTk+=2P&Fol0a;[4.B!GWU4m:n!Zs`BNlN0Rr2;bm?^PF%6a7kKdiC]Y*O=q:4=kW8e`#2'>)?9hDY;D_l*M??GBFrYRndb,6urn:6.p?`\TAbHl[d`2>3TOdG<R(:9rF7LV_u4/Q;+8G%!?Ca%n8(.f>WRk0pB.bd[%&X'Ms2(T#c[=0%NtGipAE\s-FnZY4!*4RIuDq6VY$&F:8H>TG"q;^R.o.q=;OKAYAThP@?OBG>s]nkRCoK_%[,%r?aT>frmX*bX8e\&gWke8oE]^,;W_nq&G9E]i=TE'uU_`)E)TIS.e^0dgPpr3APTJ669'm4aUoJ:dXEB,&._emYU:VFeei'_B%gGnB=Ue/;T20[%YL;2s?^oiB]>;E`_-.6Yf+L-'=1/=W,oU7k+`OYZ9]7[;t1E01Rm$^"i%AS-pS_76oh.uH>\Sl*S!?4L^.dEtK%53H1%A\-tkJ+Iq$_5i?iM<%_O>EgVij?>8a#J0%Q_4R%\M0&rK&'aY-ZGQ"l5O959Hp+$oP-p\*79:"C1E!E$ZI14WgCAG\7#$j5%2a`'5S@nNL/c5h$OcGEKU2EJb)>)70dTc0+l%,=EB0;>\]:nMrU[<efVN/,)W]i5L)p1-+UYF0,YO@_OkYe>Qm_0,J[Gp%$qBjtM%@prtZB,>='H^%jYQ;nALKh^q#6B.DdCo2[a].1):[CI@LgcFGoJC)rB(E(D>FLOpn1\oh&9?P(2'ehKtE_"QnLi>n?0e5$L&dJ70%G1f7]\1h^0)eGn^oG6*8P0hO'1Sm:ZA8JObbq4i8b5TDka*VG_*c=a2<fD3EmaBAm:'n`'*-PPocjJLQYIggCdp?%]RtAur$1+q6%ld49eJMQb9q?5S"!l+aEGD`>N`Z98MMP9<i]>O'=2LE?t(2H$VS/^nkbkctH1!V0#l)),,o8-F*jW,t.RQ'#9js?G:&)$?)3tqA%%mWZR>a]$G]p/AlIJNd9OZG=[=oNocieijt@3>T456V$"cY)0R?R?'j/X<gYiWpKG-cFLgZlkI^m3?nU7F,YKA+5VRRh&"i"Nkr#U%YdF[JEg]I.6J(=ebAZ!qBLFS_(j;9@0nch7i``@/hd1F9Q;O"M-Ba`/:=<Mc1JVH.ap9f^[L9"ZD0+L+YlcmoWMHi;QjQc]87G1N%,KK@*@3cr>>bGpg:1JT.S7t\:L3ur$+_C5]3)bPTQ$mQI,f<H/U>DEFYCG,5[1nh7mpa<Wf='Au*p)S#)eF[sN85[6.lJ$ZIS?Q6%R_%oAqn,f[\*RnJ[*;qO.'8@Fgm!$PFcZ;]3g;L@U`<H$8ah>3NN?d1**:6i8)%g[X9LfDoL!=b2L"87`$p!J4%ejTg:WtBbN<\R%,3W7%cg@cT_F3=-''1L4bJckE0d4-(ba`]gjhp%>$[`IhJ<3]/OUoJnc5'(K7&RPMc.P0o9_>Kuj)1BNl""?DhM6RJ+&U6OC-"U)%Ve>VZ77RLqaZc>OpL00\=0dPQJX/o%>6Ls$_E7^QXP]i+KfV*9+<N4ZT9e@ZW(]qW>YH6h8U+@Tn-!p4TA3)QbMV#Cq/@QF(FW..%0/mDrfStgW-@s4/*mh(;20VGT"]Ts>)oI\R:3D-AhG,:+HK=`;p%8)c\[)Z5'oAdu,CmN8(ZMP%VWu],Bru\`O""h8e1PSb>%H3T%M>TIOeE7:9;\31B`TpJl<K,qU[>)\;B=)N]IQg+q'^J&bkipZ(9_oQ?/QJ+bp+8Z..7n50>M>k]#^rMWmW.3rd"O@WC]6:tWt7ml%gIjJ8YU1!*gmP`jVkMSORAK=*]`i7WU7D)@ao/Qo4N8dPG2]>,n"0JV7BKFES(TB_gJIHZP8EgnGNO'_=\R165>Jkd]GU%bW]b%a%NE)sY[WelT<aq"j5Ej9\\nZTb';J:B?jk"82%EROUN!;NUpf_[X)#>LneCd[M,on*kZngVT%f(le'rj<*p6]CG)n1im2\VuJ-R/_%$Y1u_0=KDH6&k-tdP;IX;e=3kSeY<`RkqZV_fS\GFV!Ted75f1]]q(J7L=:.Hfh-SK\[-M.N0@^Y7B5g9WWPe2E)0U8m>(sOP;#4%[a`Q>Mm:;o,f;aAN)h!=/XtVE$iB!em<$l/7S,E9V1^UFDY,9`Xk'up-.P2UI8^0o'QgcHJ)>>ti-aEtp!e>88gY0nbVOljYHbnq%1HRG%m1u7Plrp1(g?KWi&#%Xa>b2u*l7b`(fXC[!G+ohUX!9ONKpC5_JmpfS!LgD+\\$;`blT_k")'\C$d`]"+E-r?R0BNDI[W9I%arRLoAc\@F!L-$TpW*D8X#dp65ja!(3[;$+NHu5Vp;mA8do0%\B]`Ebc2oiprD]hlqe#qublQVhOa2=4HZdE+Hop6,[b%@'Ri/4*%`2.j-;2+%:b%EH&1_.9b:XEVOm%o*h9&`'].A'?Lm`:acD7^nc31'4'Ee!3MQguTsOq:NK=GbILk-3O%)Q\(^hm(I]1;;;bHm[Im%cA"C<?GFafa`$k,F1:PV]mfkF;qh1V57Oc[h<K4*fhh6drJ[L<7V>*UEj)*$IV&F)CiD;^:A=T&L,.h[I*fQU`W75_jD+.1rCggD%*U+IRm9BORo?7.-qAFKO1Np%D]ma-fGJrH!J>ho/1[YgC`K"rATC+BNT5)+#]mdtQCN(&rOuiI]S;k"L-uI0+n+AK.kQER'd!P_E%PUl-*rUr4%9(Q@R@ojK8LH35bIX8W'\6JolEZa2t3U\<`oeUk8hgtOuGmnWa;k;FLpUu$qM6knRWOq'RVe^&,>Q$JR?0lj?T6=\1%E3#UQ%`n`S@c+QIj@r)KhWq)K:?,3S^)_I%TCI[%NJu@Mn+AKNePCWXbg(JE%qZWh/4[;'c\1X,iEeb/>Q&`YO)Md34>uZg4#l\[%hRqBWYA=\po3OZA-">oj[c[&O1Uc@u)!msjqPhD0-%n62km7%[)4U6m%Yu@blY!leXL3soT6pODdNg+^4R>6qZ^We[hT'j(@628R%Hq1a!ce+RBGC%0h]mci^inMs:#MeXCQ#%W2e<";O*HJ?UK"X'[p"MDUD+jl>b08h=E/3?:B5H_'dnPmCYFk?eIQQB+[s&Ujl9;qq%n+BVdZJf!UGotq(=h'pSEq<VP"-VWjXaV&a_[Z@]H.'=TDp'SBVXO16^=A:&Nu`\QTCGAuc'Zp#p\O-cmJ'^H1ZuWCb'>bTeSffi%dbMNb]DIljh!;GC!u8<A*P-So\C]&o,P^(8#N+i[C`"Wse2cGn5N@E!jc$kP]ma/L@tqTVpU\spHURB@p\O8d_sDlVhr[IQe9g,5%)UjgEot>go$*bh_3)/5pB082q/0tNbKNLB#]X&j]XDUdP2g9YJcBTUK^*l@\Y=>5A/K=/DBo>EV*ogoX`NVPn;h`jKP>0h"bUI.q%">8B/R0qO^&j80s&>@mgEm//X?Pf<>:GsV:0)8*[3l`q@<&XF=hKIW>o4Z5-8.\4ZHdTL8;2OG;k@0n$H;^)'g@J/:EY*r:AWS=[%$Yc@1ra$pDhK8q%^1oM%8lT/)qS]M*ob5RX8!mt5Y-Q!`GAf`/3p'efA!Qs8*g\fu`7%^>:V>:+(#jZ'IjR5.^,b`JDV0fljG/Y%%mX,M!c+HO`G&_uUX:qX9p2l]C>3u5r27DXg4%G3T.cR\g5%O%[eCeukp!^sJ<pFMH"H)AAW,q.sCaNU=Xdd&NdjiohWV[q]nVE$P%N\^Q6n3sD@h_6=I,"d4RfpM;V^gae)`jZCnmV@Wl4MTB'T#PW=C$8lC"XLZT1?<1sP"B"IMcc>`5V_Kl3UqC\][uGLe5O[^56Pm<%="0lrH7BQ(dm]g9@o!2s8Lc'B[QKlW+23[(KZcq<'Y^7o%/[KC5c(A.PF[mM8UOF&9A+J5cCEhQXjsq/9kKS!(;%ii?<j8;0qYua%1qgBEAXb@8mI86+<&&%W]$bkgG$C*Zo4<MbKUb`;3GX@UV.4bO1:'E7buC:+5(Jjg?Mh=t/72b:#<I2^G$M3cOQgp*=WD'F_goZ'%H0XEPVc<GN76^me&e:6Ki\r6r_/G3?60M4;ZCB&6L%uXZWt6n1q1>-oO+-rE(B^8Gj)Z*so+nub>\8';DL`u6WK:%HoUQgYSI+7@%_C[nn$Qk3NIXp!";e`H-#U[&r8pI8tQT]S#J#%c'<C2!S#@C*5:etA;aJH8a@[F#@_1kHKTC`+fe500TE:ZDh<$Tb(E1Yuj_L;hV%+"5XI)t_9&c8SSGGu,5/Hpm.r0D0+QTM=!Bne.0erO<KS`WglM#c+^sp_]ZrcWmfmX4H(PNM#O\n%qgC&SPP3OT['mnj9-S]B7.1%K%X6[G!UVfL:OKYZ'Ls#:1H&F`']Fs.bC'AHPJA%[+>S^g9]EBD"3(<>)YRK-?>N0o8CrM=1#9WZnh5#/5>&*A7+.7*<3VHcf=Xd%e]%T9[=TTLIEKU>=-Zma$_lmX6!;*d8E<3R4>-&+pZ0_W^B)HGDS0G$MW,hr1(s:=YYt$q4nC*M3d:bH<Y5.]Z.NQ[8"'#g@ddF-%(@]RM5pB&K*EffG!ffd8EaQ5bInlEVPl&6V6J*a.g?kDCa;XI.4Gu#N0AJ'?,j>/IPRnf]E"g'gVa;15'fcAF?I%m"GZi=mPk+m?%pUtm/5krc3/5WfHf9C^]3\lr^r+JuXjqUIeio47_E&""+PRLn4a@Ni(@uE[(&ShSmG)'E;9e?/Jg^PW%jkplK9R<`\[%jqd_`3h9%O!lTa70QXmoWaq`S7Dh;J(6A;4dd*Xhq@[h;!#uV7u/rU9%=S>n/0bEci](MD^EZCIGg=c"-54OJsg.)8)0>"i+0cJ,h;-4e%tY:%<>[IE"96YX]?(^_):D.ML>H=X9a&Spa%&_Q#*m5naSsl`3\V',1;S%s+\[3'b8cdC4)T?4kHZ*pk_65QW:XbC%)a#Gs89M1p3DQo%q8$3?jTWeNGA)X@"YG7,8S4o@L/["LP7eg:"FUmm83Ob"p<[+ESf$,CH)Sr3<13EXM<%Z8f#76Nf<9#M/+q8/,8[Pg65NWd.#qfq%0!@I()+NdBe;[r1NO&hP25uH0bpM#!-HbL_a_jN]iQ`1RP75OR*JFtQjQ*0(6/VWMBg=3OWUr)uLqq0T'`+#c3'fP&0-X9>`BJd^%m7H'1m"/doqr2<,Dj\R3-$ViS'o"c`Q5=Zlj?c@9J0frpV.?07&qON4-J[_lVU+DH&AiD'\:Eg&#Y8SrW30kNY.GC/d1?h+GZC>n%iKeWMPmR/;%OF[-mLJ[93"<N#QZM1<%)b'icZE!h>7n+UWiK6t#,E37?13q.#UX*L(+IZFeIC+9Dnce=(aqT[0'CdN]4r1YqiT@n%_Zk]sH0-#iP;dG86_9"Y`3W;SGh$VK*,o`lm7.s#F#`(kb7#<I`l5.g*90&4P[A4=G>t=D^d>m9D`SS2Z!k>@afahcH$,%PLciC)%T!(^"/'5AshSQ.JTrO:V79al%'+r_f#-*(*m`Xq(haGb)^WB?!0/lk*?_8e2fUOI@dOW;_WD.rgUS;eB]hnXn1!16fqNmq]qIH]n%\YD,)W87>Jr1k4LcS&>hF0\\UEjb)Q[M]8*mIc>6kKE+hr+E425bppM-n3aE;P;I--rB0Q'qO^iX9Gp4).fj!&$e".1B19-T/CF4%\]bB>AC3s'W$sYojo.24<nLLW4Vi,.1DXV#eebtfq)n1d<D(r:#Tf=0%2i$9_WrlS^ps,E->pQ\ER"jP4C_nP8?m.J-F,`PO<8Ol%5oI_(5>n-Z@>erqi,p_0DLp!YrUC'2Vk+a^gD%;H3:V'=:uRDZ_RlFJW((#NZ28dI<6X.\?LsFt>8-@lb;-u2/pe@\rlW]+jfb2,%(\4)=POROEbKVL+14-jEQ%)>*&bmOqmu':AVc*:^Q=h?X#@YA7BU_EKM"VP/p4>.,K=jc"LDYVf&-qn1>esDlE_i=(YR-9$,]I$7%Ik#cr]t39O+Lak!A>s(^Oa[74"U6=r+NnIhM5X7ZZ7LNWAp[O)(YQggSa7+JN5.RdN?P4:YC(kD.$S0<:(&=$a@DA5h,ao#d@aP]%jM6-@-@![BDA2;tjg-e[q(Lp@-J<=%0<dg@"OQ'.%g%TX4F+P':L"dr3f=S\_jBFH;&m?a?!L_?1J`30n1j,dMY#H9Q0>uqL6\F'%Z!f2$$@gSKRm2/C[&R)<7U1SU:;]AET1tMtqcSaA/XOGl30d,?1LJ<H[Zig'Pi(@Fb>DIbR_\A#6\prBPKAe4ZL=7tT`<gejOfQi%pL0Ab>`kk%P?O>qMLLmb8Z[HH=$c2(`,2%=b)NDF[OQd"(Tl_&e;Ge9U$HsTk':sD_0\V.jr[V[ckiKk'PccoJ4HY"eQFi6[+#MC%<OKE%R_dQDI]TGZr%OeM946CTLf6)8Zi)aTY5IuGD06IefYYqc.<3gSjAE;?'?o5XYAmsBW8ubh7BGR<jB+\8q]Tg=\G+1lK>h&g%6c(ZH/P(*Ro`_nM0+tNJ"5d>lSN@]_n8`O#l>8*13/F5nr;n&d6nnc=0!:6Gib!>(!09'b#rml2"C7(#aO1<6B5h4L-U(4E"fOqm%c_#kJ$S9'BkG#m"`0>jJ\LSO3QuGpuR6(fEC7j)_?u,s2\U:1bL4m'IHQoZ6Y?:<PYP?pH.KJLO)6'YrcSe%"NjBEF..V?YDC[$n%VOXFE4S;ij--4NP&tMEf8@D@Aoe?LdiA*]bY8X%#U+#uHlUe4lVpm*eEIeat,M`+$Ko6hH[RJ^kM]gsQ!E!jf/mnn]9S0GCc65>O%qC$Ef^<_7o%\Aa=n$ub5*th84+CNcN+_b<\i12Lih(XDGIss`*_(UE^F-k9V76hVA$Y7q_9]1^c0lT&)39%g2!T?l'gF]=t,_<P<%An-B^Go3)n`nsupH6uL2qHj%dLtLM.`K4CrMY_m9R/6Ua(Dk#-1OMl<jn*'%b:=BrG(jk1P<\(;a((ecMPEgX+4Klqa11V7(m7r)%#If@&MZHZ]'=-Q-fC@B'@o"`A!EuUcYI`^<O8PQKV_:7'aWDo5=gA:UgdlfX.\M=#FE<=;Wa:!jp;CX2=8lSA)Meq%3&$0O>Y[AI%I7<5;hN=?!!-Udqn(ilOK\je&BRA'ZrQ5%A1r1[^n*P^bWV(\+,cVKmQ3>mU\jg5B-i#^h+)nRM%*%?W<iAQ:lpBLUjU348d?5)r%Ea>LpUrbh_ooImrH@K&9$<L$2g==q8UqJoob#L&@O4,<1hL5&pC_(&@]W.UOV>$>/.+;FnN=.Cl3[(sHJUce)(%%'T^g=.)XQ0,W%W5pGa>e$!?hri?TG#((-__M-([,$(!Qi&t._USF8-g1a1(?E2LqR>)`Rgg\81\*aM9'5kRr554=*(]5Or;U.Q)>=[773,!4s&[>U%NQ&d6YVd2V7H%%8Z(BB;N>[esF0!o5@0pJI8b-:R=;2XADUEs9nr*Kn7aG/eKJej*k,tmtiB5q'$tq0#o_'/f"k:&uj\;;=SdiWC%B7:[N:!0AnbAMc"Zr7o:[DDD[>(L@;alc5iOuCqJ9AJ\.)T/>rTcZtF6kc\0jD@*?Q9q$DF2P;"Flt&+HV+&tMi6dtO;Q&eX:Cdg%`Y_fN)=R.a-=)J7WE;1Vj=`,l6B;<4m=iWr'\fbLA`g:ZFnTF-bI090UW&R*f3HXEf3GT1>3u:YRO^:<d-1M)CT_p$<OO1Lc`F\:%aoH#12:qV>AR`n!YIKGjfRIY\'sG.<;#\!_=59CdrXZ3CiY>PQjF;?tQ$4bXiAF[fbhS?Cs59@3mtpUK'BSq==*_*'WMU0Z.@bgD%:!;/T_Mb.'d>s?*n;DaV)XE,1GluoC6.Gthc@'k9OB*_XB=o6a/T@;OUom>,!p@G&>2EdcMFG/I$E;#Dr*7R(9oPX#D/Cs]E?'j*%W:4uh$_C_<Os"so0Clohh70s'`r+61Q+aMp+J+Mp7dI-Pd]8>tV[h7Ofe,p0%c&EeMqrX*9GgUPgsf4.5,hUcU6HEA/U$e"--fVT%/JT^P$kVt&Qrp'cjJ(Ej(:RO[YVpUbbVR*KAV0P&cIhUF?$5YPn&$;'OWm`S=Y[c+Nrnb\q*7Uqmdp]-@!:p8G7iLS?a_gsLXp6+%7T>:oV\N19$1CVK^pn2=iB+Ccl=FB&15fGL60O73i#o5deYedl&\VM7/W.V>:=#XDf:D3P#&1'j9Bs!"Wfpa]!la[iIoA]\V`GqE%i0GND%pm`hUh5ju!>D?g1s=,dm`\m)VO^V]-RYhfUc8O`-S9Lj7]XpXDHd:%5#RsB^amBHnLT[Vp@GUI+6I\OP:1fGHfSTJ%CruN%;;j*dG!737pa;[-)a@/\p2RpDGF%C.8AVWCnroR6LEC4ZKHj":9?]W>#P':'2eNr%3#/V@#ig=U`AgW307P[e*/Y9fE@TLLN+WE`%LW'8DSO_YR^s!q@*U_u3WmWYR=SGS_>4)YKb#=="d;[u_jq?AEY`!AUHakQ=-&G%YhC%'HIRZ=q:6Z-.n)pH7OW8-!T"lh>m$DM_%-f8b?jcpNrn=h:LgRKC;CN70=aq[L(A81k)_;o=Z?LYs?+6a0mnP%D>;")0YP8^5s^4972(Ae+a'(Y.a^aYcF4BsS&e3iFP'7Cr^%q9[P_dq5lVr7c[s6rWt]@P>m3*_aL;O]NSi.UOBVJ+E3IUR,bZA,CYg`]L'nklW56YkdtX#Ms&g'jTRTBPL&f%PVPlK'1I6%L[1m%/:h\i/Xf>H$Ab)]R12/rA<pR:'CAs.[ss24VNJ/O93fOb*]ec>:\\TV3.[kFC"k^&9f[%7e@jLK#`PBWIVo8BfUMC".@e5\Mo(HS%6702pG86-r`"0Mpb0T7MW(Z7eF$=."dN]l>iBs4[KNqm6&fA^I,SpUWLP]uREhs,sDCfbsrGusn9o>_tr`@6_!WMUH8TkI4JNP2g%Z.ktJ8[$]<<$C&=d\H?FgAOGr(=LA(,N'[?N5htF'sgfs0Ie2AEOBG!ilY<MAZa60p.caJXRbENC:opXR:"MJ.XJh25$[9Q#qK)d%"*H8u:-aTu5](c,6@l'FT\-L\edVJ+rmS.WpmEFUY?;-\0LV)OLm@HC6nhA5n0K+^7>V;ebo[D6#uhT`U9RN+MOqEqK#\gZr.6"L%nDtUHrj7E]\(9/T_E'qY)AXe:p'9WoLc#kUq.!qdAt<)_diSo/+fVOmQ%ajd58kic:aWoW<@3':BR-gi9Epf=e`jA'5=%fI!8BS=%TOjrT5dD049,0&&JXFa,Hni*.5q7[f=S&>J;t1EUa;9EBA.60P3QX6)Fr4m6MB]'!d81Ycl6kU+)+GoOR#&coTnCaKT8^b,npU_`%\=X*tJoVjL1)[O[]38e##cInD8i8lW8en/M!jC/B"p%'u!q+:%5nZ^-#;XFUVnt`L,Xdc8W+)0b4Mn^6AQqa'!>mdc"15./8K83/%>4$3h/:8;V&6DAs;&E=XjpsofOr)Ra'r%M0WiR`Q@K:@mOlYBL.[/`>'iQtt:*A)[jeWS4Gmi?&neMobM]>qp_pKSQmg##5#R+RH%3(RTn[aMckAQoG="dfro2/%97S5`\M[G'FZ@.\CmNCRJe3Ta:#"B5kdjA;[.)0s/E[E>q?9EQs]aA(%P;?_%s^h^?i6*f,T`&&5Q%Xmi3[M?ZG"Qj/1@;,o*'a8?VdM$O0>hpa->?I]ii'j+c^Q%3G"&fCHAg84?E']b,n>sr1e]G$f#`8YeOUbW6ZnPtRC/[WuW.L;a]%Y.R_/-4STGXf=r/,`X";Yujh_2jT/*=92DOPEA=^=0$-V]ef`\@]0>[03-@g"2%[H)^HX_$A;q)a25(u'h";&49Um8^Vc6!gP+7A%OW,PDTbpZ?J5@X2#pWnrPZ>7L.Lu&09`D:VN&4TO%#)3s?j+8bAJ>^Z4WUE0)369m5j..4+;r2;O.ejl%Kah+e:kbe=ZAm6\1AI4%b5c>ub('a#.D/<8@1no\6?*DY$4Ia\#B:Un#%1\=O9"-g3rVZ0_Ni+<nIQ;QA\bMq?PX+T;&MJ)'1+i;'FWm*82-'h:,M6s;P=@K%$\fmG^5RqI\;2D$Y$(rZSN*8TMY^i10OGNQi+gUA&a$*IrG`IZ(A3H8&X"dT"bU&_LnZj7+W,V_KZet`W)+8L"[Lfb?U08URH.pF%IlJ)"b(,8aHl3fr2upcS=%%U?,!nma-pMYmM9@*j-q@\_W"A/F<!N#JHs%kN9PW)UE%K.uJM`P"//7&5#8iOJ3"!]Xd1BY#N5n<@%8:]gGQP$J>2`aek,aK%Y\8i8iNfihC7%!&Y+u"rm7PmR?p^n2Tk&;KCLk%;LL2=f$CHR:S!uk)[(ukf4%$-30W<gI?"aH7E#YKjO%^\5CDkE=o+ne]f*W0`gc!^#fdGk-64AEf:C)Q_m,[E@%>'%Muqm2>]n'5O_`,;[V*AM!Xc?:G4qC3Sg^b_U\^X@SD1]GH#[]fg8[%;Z-@C`>`6(FfMnKM^;PskP!e8B>7!tL*#fq(pW]cY+,-&l^-eakHD)HI#Y%T[ar=K^GfG!7lF6Q;>WBc7[c0Yf$6E`;E'e2?'$/8%BH@*jZun`X.IPgo89"thfm+jj`_mUBCJ+mu.ASDdKCYC,b%&!)_j&BNXGKOrNS[nXiD7h3hg8:4=b^=HC<WR0HLP-S&,B'-^7mdU%b3uj70n\@&jC2iC0/%!Bq'@4j1g@]5K44!`O;?U>h2q6?ro5gV=<&?%-EYlXI#CH=WRe=uW%F;>/M@U@h+.kKGgSjG_e<#GV7!^2%[c=Mh(TjM$HBr:_Zr!S8Z'1BT>aHp3^6>Nj\X@/LSR9I5D8h)QO$i(`gA5"9N4rV;dIPUr*c;3Pj6,RDnp]ok@(qqm:7p:j%']K#%/]Y]:1A1e''(]FWgJXT:/VWM,+EQ,NcIlTP"#hfJ70=GPg,c]S\@>p!VUd5(>d\`ipmi-c?sVMH>(7[V'_=Uo4-=i;+@Tt:4/jiD%e*$PF\l<;<pmO@\b1[N1F55JIIscc;a(r%S]6h2m/j$eh8^q"c,EMNFS"7aDmsMCofT]Wgo-Do>]K+!BTuSMKNF0D04rGVs62a_L%MtLV``GfCa#9K*K"'09`BiJ2mUJ%-&q)+E]cL8lc4R_L8p]FuBap7PQ>ZbWM]XAT(Xh(R^(:jWijCtuiM[Am!@i+c$-2c/,_XsL?%D9a!dlh!Mh>IGbKlU&9aasq5%)Z[E:M_rJNX^IAg"h&PW$LT0VeX'HVIgXG"jAMl@K3DgF1Wd"PGsQd)NB7;IeSaClf@GfnA16r0%[HfS,T(jLs-.(GgY'7st:=@o703TTu/6\!9Q:5"oN3qU(W$uT6Q46OW$K,&4.IdTHDPB#[$Q!ZGY'U`dRNI^t=K7"%L\iuP_NHQU%XMOk0)$Xa[&'VU<mS4pfejjbqXl_<.X/#H4o&\e#R3ocu<G:#R>>C:WL5WAcBd!u\JpJdLc1Pp^R)]jEed<Leh##=%=-AkXNCN6X%^c"10\K?jZU;^6i%pCJja9T%f>+65?jaI>Rn<^H'E&FmR/\##U]=>$[ZXZXs,+P&i/%N5]*bs5J3S>pP$[(XR,tq9CYF52ua.Jdq%Id8g6Kd!9-6Nj[-[/D<tR$G@uED6t9eSMG@a1%p7lG`\pZLgVMo<<o&(Uum#6Wig9CYlmb=S$Fs[.^B5VZcJNl.`e.6mRb3jSLN\%=L9.)<utMZ[[pW\<1,\"P@n7,phRZZ"+se`%R,Q`"kqsQNur,-\p&GIIU+F4f?q0b'JkBVi8a"76\$H(=a"3l8Wa)0IZIYpU4=LA%D<TF$oP5u6fg8rMBJ[fi`?NaKY-/.3((0BRO;D8;Sil_5m`MM*!f[2Ub(;]'UOcFcJn6[^TsU[6%(_Go3U")LnGB?j4fJ;IBVm;H%<e\5A`^XEdH/D5&518:Z)hY/"0hB_B/1Vc&*'OXRl:t!r>-FhtVc58>p!/KHF3o-l->NgX?kcl_c,;9-+Q[<0F]hS:PmM=2f*&A8%U@mAZ/$$lNS-Lb[gkk$tAK4K7$]dU]&,q5-A'nm5V_))9^r+@Zc9c\[K.aRpqX6<&q<Br2gVAZCi*3YI_gd+l"CSKXZ6/(nCc95;%%4tGjE`K^+2#&FSUm!#8g'$G,3@0TjN,h+afhqps(4J&ROdI+^>4b^gF_)#JLVg_c(q7B'k*'d8F!)!:HMKZ$OnQqh^Z+@'n"sBO%\<6KSGlH_%`qp@W06<K=[K,&n-rMe?U9"N8j'hK/\q_F&+=4S/fH8-%2stQcTCSXDYV0Q/*.R"+blKccfpm(mZ5'hWA&^5t4h>%V%R<Io0`S@:S$-O*9]"GgK@CZc2[.j6?&AHQ8.?Ldd7G^ZjVH.*W:?I;T\#p/IC"#C/<@_%)r1e$`TPB3uL@YD>%gbncR>s^o1icDt%G$1$h:And=,NutcKdo0dnMT$Q^6HBi"S[cfQ?!Degf5_e:gKj:"<YZ;'8nbpfE9eS"jLFZ]\XjOPalNYs4drVZdE6;2n/pU[IFKW%/lEdgO0X-pcrs#dNBMC2Wq&"VbAG#&1eBJUURM9&X5M!CE-DXUUD]WG7YFGY2DWTnd;jjf,;r053G$&F"-&nHBJme)>3sWsO)[r]%,ZM-q;#:hZ##Z.6%a:[/!?V`LN8+p2R<!-T"#Sq^7&(KBi<-7'k*28ABlH4o;^Tr<*=5PPmEHB("1Q*G7#Y)L85?2t_&6-kTm!1G%>)W(RA+3i([K/R#/=XYp[Nc8@+[ao&H_Jp"s.!P236IO6rJEaf`Q.\pleYM)q0V9\oGQt#`Z1&H3U3J=KcZk`BHM,sV<kA:lNk:3%oZZ,n$QA-h_qh7\)qDFF]T)$+:R)*V">Y,Bg;^?3K..0RL$Rk."]J&q9j9&7"sW.I>sk#qJNROerf$L-QD`K]"'I0*`X\b(_b,?/%Z/\lkN4)$QD?Z-^>VRL;.kDSk:fF/-ba!jUa$V"op)Yn'o^e3j0]*s]b_-$q+jmI95>T]KE2o`:[jM.j0[2A'5FPQeLe<(]b7%;W%dmW,kN0ZbO;nI2'$;K>4h7@Ih0t6;<fi&\9F&<R%)o)&BT(5n5c6DO&F)f5-Np3T.dVQCTXTgADm`[I#G'bi#_*(O=.iLu#rBbk8%6":[02r(s>NEW-@2JL/1G\UR-.(eK,/:oEVR0mE=-ljc0$0)\hQ;KXm1[XfcbUR_r,)*bedSXHGBAC(=YmU%\+>*TI*(?,R;,rnb%/6YCH%3"&8j0Al-GYBZKEuF(WTKq)`;(Z1cJgu"f`bXpa6B@P"hVaN<.d4$?f_`oj?*l@G1WmTQ#SkPh/5HPkY7.YPFCm?677sgF%doH[k@n"3[]A6Yo;G#V<Bju<Mb2-4(/ApsG>CM>(F0'R:;M^fR)1.U1iMS_LpVm`e@.DL][>R89"M+^3^n4tDj$ZVHBHtI_$:d]\%L@ds1/K[Hhjbg[hVc1Z<m`L\t_RR<rq>t2n)&I"akRQhC;p2NN^mD2=0FsJu18ET$?-AfjW8!=^[\l(AZ;rE]>q(6MQlc=1>,AXC%O/5$D\ht2r<)%9?k0&b+i$En1bqMEC"aVF-rgGpPMPM#)`6I`[*W^Pu.GeF=&tu`\.L*`FO2uA(`"0oUd*gHp8@]sq$6o^-?HR\5%6]lbVmIi.A1*jn@NId"WUZB++#8b,E;A<1$W^tS]3<S)Gfe:tp-L@C7o(Glm$_p?0'haM'5/Hee@nh<ZNf&[-[N0=r;G@2'$iQOf%W$oEmr:q7mdTfKFjTY%Ka?[@:+FGh=dYP%he#^-<aXgB'!M-3`D\;J_!Nh[dI]6#(dWVYSBS#7D/UW6bnC4<ti6CopD$claR.CQB%3A/_3P>FX&L3Ct;q*<ZZB2q)$[,jI[UTr7WKKuqPUVWm[[]E_R)HmSb@!fg*D>PRTh@,CXYA4<bSl@#FGDUC(`b_lmEo=XS86_Ap%Zl(W5`Ca^?c6,\a6b%JRC&(c)XXu_!9@1P3gJOg!2qcQ!7QD-pY^]Gdg)NU`-rGGJJooc&"LU;&oW)Z,oRZ/<$=C(#YF'SqRZ7&f%e@g8r4MrU&%""3++3%2&?au]Aqj_m!=J##PG;%\&$s%WLRcL'/f!@ePGF"Q!(H:g=p>X_s]k@(feDB'U]>DM[YOKNQ5N:(Sc^]1=%8%\NR>N>MuIp\qT[+T&jd]16^c$4\T73]75/;4(9mQ^iF5Gb_j)UOeAdTkdD+*dUSc'ieaYBN8`jkR3;80iA.RAsE%5aiX,GN_;]%4h-rTpBEJii<,R(%mfK^V!L9n)dL(Q#ZH\3N:rnu^LMS8$sK=c)Fl=WUMZ!<<Fq0ID[eB6$mD[)'KVEnMfq`f.hB>gqd+AR)1Hb>%hkCk:_\\58XTg4e<nHNb'=1W_'0/oGb[#^M2Q\V<blNAVrF0cV3jX]dA)3!#4GmgcCr[uDXl'f1SY^u5!udLm1h>F`\95AMPgTI1%L@j-?r1Q35U5g-?6Rs@kJs]^i6^O6sQT-48C8mntbR6dcf%P5\WNWO"(2*&78QgB.?o1ZOd&'g.3gT6PWX"s7l4n8f>:TqWH-A`i%EE<\(YGpj!/H?F0=X7plC+)R+,A%==Y>8=s*`93q&)&GdJA3l):V?%C'47T(>IU2T<6G16mdFV%2YU9bkF6m&Nd?s3G#/b)PaAWJ%h'6''Q9`W=lkN5\Y8iM.(-\XD3"sr;==!RYr$fs;E?e]D:2s"u:c9BaK!pkG74E`U:E.,qMA]Fb=V'qFcSgb)F8#*3\abe=cRHZ=%n+0B!Lba!/+Y_6V.6C+(M-GG]Ud^D$^$"oA75$Z83W;G[l<a3_P\^eZ,Y-Tm["NQ>3`_P7;oSWG^eqIJ^)79RFt[`m_RR*_3W5pP%/C8S:H7H0'`HA4lB=.J2_-J?J<NToIWmQ%P(mES8:*lpilHk;=QMENZQbGSGhG7%nTq&J/Hf&M>oPUIdH9Q',*16WSjaWB#j1nC$%$lE[)SY4N<+#0YbcO0.>ZA.L!YhA6P>hJ*uXHg(*JsRAdG(`6#h^^2#gTJLB(Nk#JHRIp\T]5B/V"RCjD=Rp.hk\ZDT(N4Tk5/oW%7G2ord7W^&c4o3_frJ1Io8)Dd>,*n";LV>HdN!_li`VZfY(LCuI<o204&#b0jd`&t64P0e`7&u__F4GHfAY9>K]EA/Tj4F&fjAhu%#&c&(_>EA8mbZJ_]2b+<\asTAg^t@mhNn+?=JWq]/CT49pF,_^ID;:_kBPr#d<<s:$UbACS<98Q\k:tLLD0"EalR>]f=]M6a(6pK%BltlWa6b<(O`29:I+[/K@_/g0)c(:T=_6+DSM8Du%npSOkDZoro?OH])GaQRLMJ9aQ@#rL7%qmV)6$0A`^a0XQFTpPMj]G<Z\uE:%lQPO_4&plCrDXfT/Da[O3:3T"S9.h7U7I1dBfH"bJokbLn(7gW)f0V$.km8&p#QAESLkomC_H%d^j$Y$Bg(qYBR14%_2NLi>9ir0%Z_ifDhC'=g4C]8?QL.['gCD&p/WUa3X"G/\<&86[$2(_;ct_H4<,=/lXlM&`oX@+j0=nP'p3Vq=gknTo.i)][h_2GY[%=/pgiB;>%C%[Vr.F:LV<r)6V1!nRGIcp0U:7U9*.fNb]C?_G:bDV[,F=%PPa.sR@cHD-sEcVEt0?9lnMEB_8W0b)::dg_UDhb&:>;V@?*42@s%j1?16ZkbuTUa>?<^<@ns5U#r)N;57cS"q'Kg/f7ifX0D&fErU:Cp`6GD"Wf'YZ3kfWb:bRZ(eZoCZWGDcD6`N*SS,p_U]nEBe[od%jEbbQqWF_s?U4K'BQKKA=/fuOC$mmj=cQ%02qPJhbCS5jE\<X6O6BE"rd-/g1J'"bYUpQVb6HANJsL3-^0`f^;WbE8lscc`>4TN^%.0Vb-mf6RXI%EZB?&XOo\1*TCX1#l2[_pkK9J9\IS,.H)jn8c`U(2OK2pZu-p7O7W@ghg7'<#K91g.f?nLZK'S$oN='FK7(T[T6W%=.aJuQ1)_(hGXjK9t1*"lFOa.r_T"6cr2+1bBde;n;.$:2keG5)(Y1.`.nD3G1gN.?u^6[5!'<[s*2kZHCOFf(.Z>lA/X"Tm"Zdc%-%ssd+Bh/)_,tVTVf>,j*]j-#"Oo]BIXP2]O_+a@M]t>J!KjR62f,dl%\h0MM"b]U!jq&PHa>*3c69X8>H!mP(1#UZiV1>X'p?8_%d@9-98nd(&?k)3:8=<8tU$FNGdC_`"=up\)G8l4(3uEWKeu'#[`>ZoK;+52Y6[E'Ap",/(ao8n$?-b24\LaqnShbXg-/cK!2Nu'\%[K*][7@<83BJBFBVDBhjfLs3U!g[SG[lJK=I$M+6Bs2PPUE)r@I0.V&/Qs3BG<)UWSa8Q$LXDNa*KROO7sep[St'5Q:CeG0Q+L4i%AedmUOFQ30oeYW!&(sVd);I<_LC/#8"Ik&6\\pjCcqBWFjbiF$+F^j9q9porQX!8f:mf.>)MbOFoQ?5iE4Xuqg8"CS']ldfK8Wc6%cVcZHO7W!YTgs%M7mAh[F3CQOd0t[[Zhhb^:el)1;#:0a*3F\ZW'dC`d3*4r86gL:c2'tX-S:!Z[Q`Ep"c=1Ga=!pLX@4Y-liNqn%"%#Q6:O+M-XN%1g97dWL#YnU@-ACJ+kCLP^A"EuJY!uor`nd1-0WX7'qGGI+?T>CC2Mm$7*b249D4IK%<-cZF&!V^Q_A$qI=L:U,%ERi*+;[uBVGrCN?a=L]T'+H?[c`#%(YgF>!Bu;q$?Algl-I]B?N)94W+?G8U$*c6g\O4)"$:WO#+YlS[c8AO/7?J?Xn&lgKGV>?k%1j*C\H<D,2,d/cUQo:qI$T)J878j7?W#8g833Bnp]5;\r%d.%u%K:21o/QR@jNlFoN;@e+>FUgcA#eK[>bErDQ)s"?ndP'YNS3Rg%n6s[1r-k]A@dR")`]>hV(QAMf&*l5G.7X^X4-gShpX])QU8d5/`(]V/>9,Wfd,?3B=Krn5P`)f,Q.m+WpLYsWD#c-96Na=?KFo'0%:5.pggZTLPgF6J'OqRP>%P`;PfpTO^;%E&(d<b3nVs4a.H@G]n.pBg3`diDF)I4(<MWRKIi2rn+0>tI[ctQ@XKeY=ZFW?jEnjp`b%&K>qnA9-MK#X&f"7aYI(oZY^C?@`NL)d4jZ)qC5g/[)OV:rDgadN4Y7;QDThAq>,9]cttk'CD>I9<bMZm:,op/>[uJ(AXMZA/V,B%p+ioO]c;<]7I-ON2>&kc7HJ2;W!]:cS&&hO<b/^RLrH3e5g*?n'ar:`'+c)-j#+'4f'eDaNA,4?Wq^5S/=_bTZ.Zj_-qB($9l)3.%-7`-hWTCg4b:O%t:=dH'.RncKUgb=WQ_\eYR?XP_qj\<_G]40YCUTVRACJR'D-"E3STb;j=OH)Vmp`FR:;:rpZnoJJhdoK@4P\h>%+JFo3hM,nPBrJ"mTlEsI2c,'r$C?*<64@^@buW?+=U3(_.3>Pf'm'A3P8aZ%*kJ*O.1UWQ24/*o]G9$TC8P.@oiF/^D'1\RgC`EU%1aR@J92'atY#Qt:1;]LB2UB(LXhB(Z`u\O`HgTpQ4l>u\TiO;F9<0Y:mujc+k4[).ajBD/9LeW=qf,+D%*lSXgD7>Ehc:WS]j=je%eSJ!].F#c@Julf6;>R?rA;g@/UR%N979R!ur.nR(Io6`%`2Q)q.]90&<9??UMjCIh+1kVW2tWRP_j@W3[,n%F]2/$eoVa@V]@NO$%^1`c+nq*aN$\Fgo"#!j%692Yn6-ECoLa.\"ddTbfkIj]%eTF^I#kP06dbbrPK!c<EnSI/k?LZ`oZ4$ih<cZ2kC^!Mc2;/%R$[Va'%qBB*unmHNQ;M9WK41)"S_fV<pM<P:]nQX:/FbV8a"=0rc?R.JT%(>af/cgWZ_nW[8^53bM<PtpL5YP-V0s$.q0`MqpJ_:t5U(rJ-%OO,_TNFJ'%.TX"3ASqEn'O4[`*\TlJPeD+EmcWE$FM5aJ;W3%.Oo&c6.JQl`+NlZ!qeF8;h"lu6RWGL/7[%MtPNaB!5296+q%G!V%9cPT(hDlVhX#rnL!,oKe=4msDHe047PkLjGW=LLfCI)1sqtJiKG4g`K<et+&X#5Na1&Z1<mBU5;$Gf;?DW.kNp*LZ2-,6Ta[>4J0%o!ph`Y;Z@gjKKRN-?[FmA':hF/H_!=#KH/])IHR5i`iHU4`&U&/AUJ<!`f/!f(SPQfC1EFXaZV_XBOM6*-8S2UtmlCTbU6?^![sW%Q8.*eNU5LhCZVX3!mc/M<K^)Rgm$_Ig7ttOmY\;1YT/o2GTa[M54:etjd^6)9eGnE8b[e5\#)`@B-=_I;ZlR=RWo#`>Im;f]V+TI%q0cKXhK^"XQZE-,pM''R!Do:+ikE[T%eTUXG)T:-n(Dc@=_eZ[oMnDA2s"<hG!?BlO%4uuKO^Ht)Jr[Lr,&AKD@TMW4%:15Ku5H.%3sUS7S24Rh:kr&T1kW3@@fSZlq?$@$<S4"*q(kliiMb,_6$HcOYpXkRV>i-Wa=1:DmfJ>^BkiF#iCHh6gKXkJgg23o&2[*XFWj0/%"mn34"JqFj<B>:hDd0a+@*g3"@5g`+`LahRjY2:ho:4['Aiuj7/bF#Dpb&uO4):i'.C88r5R8b4[#nT@0k8&qZQ+AckXs^0YFtTX%#-p?OJ;'%5*qO%6<]L;6%<?fU-D%%/1X?87%##Ne^a64i!-lH,^gB5l#RraMC:;?CEuphHaCS]I0W,ksOGhRcB^lqi"F!3k6)/$N%+lL;V2<F*%5=is2EEOI+$n'UnG'WH'#(h8B(c$sa[JRc(kVds69j!HgUG3=*C[CP,j*a60!BqJ6WfS*hAeVfnQ3T6E%&1.s4PNCs%L):9sgo>(B4!"V>'c]/b,&AM&&__lSr9d/^D:l'G050fUSr^*aF*aRY3r#0H]ifXnfO&Oo4fNM\JQYkUfO(cf4K1^;YI7B*<>7ct%Lr(=8Rb1afb#8*/!;S*r`<#7$BZ"O/&T6rM+7Td+JU<'=-lQjIp)S<oa_5?*X\Z<$Y@iYL']pI_5Sm/^a1IuVe(R1X[-;i]rsk!#%fpL&R])`a7j<-!eSb.a47N3R8gfmTg5M$6ZNLp+?GAaLVqGo:g#0`cU`H9H4)$A*V.GO<JmQ4GennSBW])f-d7Bm;T0?MW5AhRus%.o&iZ#Vh#b[J!]^C3R%Mqs,h2lGj[r?[4='nS,FZ<>0k+:-4fbBZH:E&_#dgDq]VtFRQc*U7GMK2!-#u3:4^PHKULB9G@u&1todW%Rs&:]UG_."O(TFVUN\^ebG=\?6-8O(6IZ-#BbWq!p"T"6kZR@6Duiu-TEaq^4XT0GYX3R14TCoo:/FK,-`pP,Uu&DC'$kb8maG!-%i8b6P&l)V+It[No0@^ZMl*un2')62J&C;8-@r-*`qVql&*Qb@&"K5HKO+U;o@h3Jf)fZcPa7,-TRknn`0m<KXW1J"VKYEg6U?dM$%6&fH/IiIj;E"3c-K]t?]k))c#Jq"iL7F8UTKn786qi$!)j?SfY'[.#oc2'tHI@!.b?Bfj7#pPeL*5CN>L&tb0AI^M,%.B`/2Xg-N%Cl9\f#Zg*%:aL"\[1,C5BKZlEWF.Tj'NC9Z=%F;%,6_)Kk)7HdNT,SB)[Wtf!G7087(Rt:?T\oL9>0[SZD\$:!'X\H=3OWF.dcdQ%<8do#;0&`rFN5eXC!^3CEZKm=\cWX";rJ<hk2+(^7E]]I)n1t&`\q24CVfeMZLJV4^P<!Ve,*DR[C9i>@Th6NZ(,AdNAIM<oibTu%"<r`ZYtcA,+u<'Y/df%m>Z91B;[U*O2YT`F0':geI!6>^L)l.&N3VW(T+&oK_#n1Kk-Ie`fX/8`kh]72oSck'<tmM5JoV.&4q&mP%iNFdd]:3!Vl]gG$MoBut5(T/:fkH.[9I=NK$1A2.<VhIEA-O5`YT+V*'3``_c<b8*7h+_s=!qhRQQ+!^?tdT8#S'7Y!%lI%J[uu`%BP.EmR;2XR=uSAu=B)Q!qT;eM^0lpRYLpJ0DfTtD,2[?lI5[h,NK]!$\3MTR?n*G"A\L`).`DG:.eg65S`[E^S+g%U`qV&e!Jb@*%pa[bZ=/XGZ6T!#`^6#,-%NuF*AMVe8bs4+OBgLcAh`KSML`ur[E(:-V+]/=s`]#iP*LRC2T,hCnU%!*QGh9S(ML_`9#&hrn`o6V,%K+Db4hI+CWs%1rTk)M@XZZ.TRC?39L?=8pM?YD=O81g]EXL8iQD=-.Q5;VNT9Y?ThRN&88)n8;3S)%;h`%g,F-LV\L(`C1PF8fJ&%2OT,Ii**Dem8=d1^lgAjV.C9!3L6XkpXS7gWJd@J"-JWU[Hc"%C_5q\;b>0'ng:XC&,]7:"ur!*E\YQJ*;g%?N8S**3Z/.G@pMaK%Qum'"'a8qOk9/&=iU":&FB6Bp@+hUXg]4tXmc4S:<b`r^NdVb0pnjk2lu8=)'Z:n/23U2%Pe.mo-7:nuT8(%e-Tphdgc",2MRt2t%DSDpUa:b`4d),LH$FEKJje8Z7Em8Ad)0%JO8ulKPl;h(ISFip#mn3'QT)']"qB&S8XtK1Xpug$'s4dI>DtA_p5Pp(4e2#Mq1GG="%_XQZ>!(U\5BG<o-3Fnki/TE+A6T?lW/D"AqEBK?5KT+c/GfLf\KVO+i3tcR135Qk+q=6oa%"#2T&D831:)]QA'$lL"7]7NHgY7C(%(VEg+#[A2-.2A%\':8`cE`P;m)16)R\+D+H:,9)rf&\?S3s4@AL`bj*'[^f^qF+Q]`NIU@gK"$ro`lnH,q&?$0+#gPj$Cd+\"P4]%1g;;e#qnVRF8`^!Z\<l^pM#$q-e4OEd9UQDbqRmK\Y'N"-6r&:<[n#'U?YF:g[uV++7rd2P#`.9,n=tF9M1$e$49'$2[.M8<+a`N%(lIKlpSo+$K_kEOg.T9cYM1baO7C$07bRHXM1&M1HS@<LcYM6T:bq"/VVam;honhY]I')LJ0LPP^#LaT@0U>nThq90CG*N0(2jV(%&TOMk5d`]]iTP6S+:B&3F]3XIV*b*LfjWU<<@JcDmG(D-2o);s;9eg[cQtl@,C4I>:+0#Fl&3.kj@p=Gb%,inFoa6X.n:#oj1P+i%A>D$&3t*3'MF+#QD4$tb=uoXu=I/8b3V/2E5UWT^l]"_N]b^<(2+*oJp<rg-eEmAH<ofTq>=KYh10HTuKEq^S3#E>BBBsS7GbbXH%$%8]o-l%`u6=f"s)`-"a'LYN&4\6Zpm-3&K<?U_!K)9L6`Q74B9d?!'IOuu/3rX:THlh8_VT>[7%K]:2G(<#UZHP)k1Fk7mZ30WV%VO`](3`-"g$qJ.['>[+o@!;F>TBQ.T!`8\-Learj)T22t1+L@1!XITuEk?8*b$;U(X#Qrrj<2JBpsZ>q>tDHu'7CpF(kYjYc[<^!%7PVjD-3*Tma8m,3)r_N1,q%XW_0]9C+\3!&'/LFmS18Y"i[8YZ!Yl7M4OKTD:-kQb!eOjVGYpYEqE4IRmT1.p9F5QocXeR]kaI/i%q2GLK$Cc@+/$eLQJA>pOM\F6iTM6`3JkCS>lr#QkE`,(-gdiR/q^U)dU4$D,+ekJk@3#uKbtj!ATlM@H+Nd$DPS$pCRZeHFOf1I0%_pj+j;8%Qd0k(k+QG8Wg+:k5\K(#/,VnRQjU&e;P:h:4lL&V"OWrD2n'k3Q+C(p'HgNs]%X99i2?kCeS#0tYo50mir=S/;Hn,jEX%_1Y@25W>e^*!<4a6<ij.</OfRP6"mes)H.jj<bE[7kO#l,&YT6rr'qm'%1b/]QfpU+il&D#b'!U&GO=pJe?P=:&Hbu#kXkJjA[;9%*!*J[AX;B5$u00`be0,)2@<F4FGhhEJgU=D+r/pGdrn#hpKb-d1^QZGNl2T.d&+GIo0AeJTZ>aRBp;C%/EkC7Y/3S*emKt2;lE!D%59U'\P>;Uo@YhTDY0Hse)5^k!6G6;4Tkn&BFqqM2T0DTDWj$d_7mL1rE7jL\Sqe"el9]2WG_7q$bcKKQ#U.Ff-*@Uc15_?]iQXRi%Y54s,?0g([#%risDa@^^'KrIQ4PGV9NX1\chpAS3RKP^]&!^8<!nJ/:#$-C;@qC<h.Uhp#pGGBNCQ:KNOZlKAO^VOe8S`oaS^d%l%cutf_De=XPKWnLHiD_m!qdhsj-=+9*$7q4+pF(W(l\Ot3HtS.Q9]]YHWNV@j[J9/$q:iSo!W6r;N)'Pe#r+Hfe=hq-k#.(kN=;n<%Z^h?m;CHKoOg=^ocis0?1e#R(4j1Z@1mi7#-jP[C!3QtJJ)^&r]T%@S&"mQ,R<Hs%J?u'f(7ombe/GLeq!BWCJGh<pdW>JXgdO'U%1M)-a'SC8^9_NQ`?OAJV7L^1N6WDD./!!CJem]*jG's1[1-:^^S[>A5hu^_R)[UH.5#f,i!6L:$LnJ2=0NX_K@Wr2L+:s\!H,T2@%7)0X.mM]d&bh4g!5MHdl4N9I$04H&W8+GWsI6\dF,M8aDnLsO_&jYRBgpo'cn4iQ"ieK,nB>:HOlqIR1$HtlU,Sun*!_\0=5aB2:%"POWs.W:8-"G@5_TSU:@Qto*B%=4um\19U<4[P=*gAi5Ijb$I$8:abAAIR4ZVpB^:n]=mlTD]\E@TZ89lmtCBjis!oE?ZOuB=1Ta%R.r>_T:q=(`p?F-H!FaKSg/u9^7Q.JkD-7g8V\so5'%i,:<U:u\.+lDB#JNl`!.mI9U0H]SJrk%/Xj1;LLOp2eKomsE'3I*'\\Q;%7U9G4)#L=fnU1iP:^"FZD%F5AEKqYf=iG-U(arT4?G`DK2;;7Ad+bZQ("$BKmGi)#LPj2o9p+*\j#W.Zm8fqan0e-*oV)p)^*X;V%ZD^^hfKO%sQO#*."ia]L@=ahJ+u[V*<F@jBnHejiO6^tD!2'`U]EGr.A=9rU,C\ErSW\5#Hgb`=,Y\AppWTk0)8L9+%b\tR/6B%O%HQp58BqtaR<Kq)0bgUKfJciI;>ZUq2%0NA]DV=hT-O`9X@bVM0?F'iAWmU$d+u9;F6jh]^V(1b!=ncK\4LO"J6<4nA^A).a;Nu6Y%rLuOoMeU5tWiTk^"$ICtH_<'^RMclO1,\7lER\f#8f-KR,%<pZo?=II[\$\D%)*ogY5?ki`dA6n-mfXiD8:R5K3.c>c:qDb_)Q)q%W*KLl!eH>kD8kQ"[Os)&$!Sug/JrXQ6@M\_?CsPP==Q]iGa6*Yh/XKKpju?QlI/%d:3<a-ppW]oZNH0./KTl%'O?k&Ca6G*"E@&^%bQr&)lfA:Qeu\)HbB>VO#"f^\4Ra">S0?+cE#4K6Ke/dW4UuVp]7P58UqCH:5c<!4Kprf50lO),[%cRs=kKPh,sis(G=7";?>$QR%)bG<bkXrdOlRH#tBVldiH6%lT-b.9Be2tK>JBN+oA\23"o9c7;p-L%,,KGPSX05L1\"oUNF5S1-2oVF\@uuFd*Z0O8aMVLCR5/R_%`TraI`LnC30@H<[Bq=7QFT)H)JO&sgij$=7$'0Od_'Q1jSV'4='LeLt?^*Lcn0U5j_QJKWSu`0@.Vr'eh-4-\)jo+KVGBNe@of0\%lEn?N3-/gn]VXTA_<L;?cNK#A6X[ik;7i_t%-I2A0k5"agh1QKelE`nm_nEA[Np#s*/A$kS`B5]eWBs-d1H3JGnFlk@i-:H]HEp6%ZK=sio7!73j?Qaa-OL^,G,SselIt=C%I6\Y/T3sQ)$27D%&8YVBda"L6$i5_hELji3GdL]T*d^'`;MOpcb[eVSV!`(r:#YUKKdKf%C+Kj1!5\D=)h+!mJqWoh'N??5F>j(j;*+0`o,'oPQDh_]+:<6Z#PFh<58;jX2"Z)po+1(MLTG+FVpE8)hc?MqQ2%)X3tjWoBZ0ku%n6'A'(PIpFL>!:`+!dM->3,.->4??(S$cef_E2hf5UHT#e-nF*#QqMaG_MPC^73O#8P5V4E7oP*M?].o)(oMGAiC;?#P/%:[A$BO%2->.oBJkZP,[fAJ8D.]FlcqE2cYOFq\;@VD3S>P4K-7p+R17a<R?/#XUZSm+>WkKmOUeZ)kWLH@?r#Xdj!poL-klbl5.h8pC5=k#%*'hBd6CCM\g*VADW'`fPbfYT4<jO^$:,\U+o9f6%mbj5=HLYT;X/'E#U1irO8e0@F,;`9I*pX=J8e6(`#LFu?=('UgB;&k=gIbL\%"LB:'Z7P$q0:*/8#9C.r;D2WChO*;66Bg&bYVf&C2@Z356Yj,N>a.0?.Hb]cWX)mk^Q*@i5`*mnkc3uG,3XM3Cd4ekZbuAD@GZO/%ZWhrUBaJiI1)Lcgg0-b@JSm4RYCe?eX>F78qSI4oL4"bKkj4so4D#_2'W_Kp40dFX[4*O*AZc9mU#I=[/a<Fs:CAHg8iITq%TER0%aE">'"s\Xa>#b0'3VJ0,/>J^8:PY^C"csbeKJUf)%E2:r[qZ0,!)WZ&F"8\YkM]JSX&Q9jE/\S0h2,)!M0AcT$!3X##bR)^n!SG#%;L$%'.An9.&e$QuW)Wj0!*=_<W4!-7!]g>U'b(C[ifbKe^f>BsFdBfE<>A(K3i#?1!;Hm<^[/rVn&a.@N+j##*oFV0UY,<LJE43i%KB#a"692#LY0cT(U^(P$_)s+ck!4'Lk>7=niGdB;i)+21#2nRJ+1$X$$@F>Q!hh72b!sB-;euEQ4977G),7ME9ZGAg9O)\.Nu]\e%75De^ip3Ut,VZqKg6*%f/un#Ep)Qg)Tg<P$6lRuDJAQ'g#Yd"c;5i/k87N@u5IRrSXt#l8&V^&EU'q>WR$Nq;`WI,FUS!.>1#."Q%N>]=4H%D7:Q3?>&Q]o2hR0W8t:#_ZR#^Al]pH[%Q$4n*0Lh?DqoOBCc),mFQ4[T;jI[lEXa'b6E.S(!UMEq>:04]gtlGs[<&B">g%4?R^GVP,g`6]a5aH)^tMR5FCaihGk?jln3qU%B3A0VsGjKe/[0=Lq#e6!fQS?;Z`X+cM@04i'Y>I6;HZb)FTl%&Q#s!@L.;5SoqQ%cN+I^VD6*-'=?.sJgkQ^`:P[3R0OH]f/oEA*/Jb^$f6fdKlK_GH.89oA14iVgBKm;Ml8D@%mDP5^6!RDAeFH@6(O='DC)S>1.4Yg%b<_N(fZ^$3Von?Yc]eO93F$J$;Td,d_+;9pQYbU.%I!NO@fVKpML<a,@7k-uX6"r1AR5^l:*E5P9Bm'b!4%M$bEX)'$J'59#kkt>%X,CJcM97fBiCME/)j]%K,Sobo4Vjm^P>09]XbSW,(=#>aSGJ^t63^FrW\VFL84TcH'WdU'ZGVPX:U\BMJVf9.Wt#0`TmFNWWS!UR%U>/D94\6Q[Y5tbJ/$9NTk]/YTgsWYJXt#Tm81S"t(pY!_RpS>b2*>.i`_%K1$*famB"%=kGueMq2E]W[`7`kpi'QuS3mL1acDpIE%=GmS=U@-+O-ut-mkj?#TPm!uJ]-ti-.n6dfk]-]HVD9t8nItSD"3C4oR&WmkB(MeK#AJ(IT?W;t>!!@p9H&Hd=[rZ1'2S/$[]5AR%O*@@j5c7[b6$f8WUeY5Y^05!kPC,g:&0/V6dN!9;Ca9BOhbstRdH4Y;g:f$g5n%Kn@s*sbG7IdjK+$8!./Lqo#Rf!N;T<e)Zg+AL%JV3nn$3i"h2RRABMt#qa2WB]HSlk1C"Zs!h$Ai\s9S<#jI3FG;]HOnY,?m#:n'HJ$[WNDJ(9KS+*?e,P_b)<"aVPP$#.%3KR#BKH%B1ePMTSRK2!JA/C-CogFQ[F./DbJ4PqSP8lqMS_[ps\.!maFtHqr.EjJ,HL2J$V])j"GlSrD+O8ig7E;iT$gX^AQ"^J,'"%++O</%hu:[ZO'dA2c0)k>pfHd]^Kpl_D#V3Ik!T%@(Ou8N?iJZOr9Os[rudL(k$Oadf3_&gRR*Sb_kA`1L3(8W5,['uiQ`8(pudn?F(0XT%q-3oE;'^Cb,k-pXh%3;,/hg>[pZM1dH/"U\GfjR0aEQQ;4)o$\hX(DU2nI+P?A?dROhZ06nN>rbFQ5`skW,:-,3sn`IEG;J-*WuH%>^@N?UhLQ8<n[0iK"F#4Pl0R4cUktiM8Y0cUKH\..JY`=H"8l47SY`a_`A`bb@6hLV4('K+q(IMGf\H"-$3L)IFjH3ZGY!+jQAW]%mX3/I5Nf,?1>D`Nk61QYMYo2iY5=g]mE[fgVp%<mI$*B;/-7pL$M;97El)n:iOLRl)kZF4cS^a'8r.uXA&[N>Wq'8=iLO]HaP?)B%FIb5)ksFld/eW")_@VaH,cc;J['!DmOO)H.n`s-(la\eE<'TE6cZQ\Z>25$n*Mi8*ZM.W&H`@\SgHO1$T?<.S2+cX!<4dO\Da%/e%opJV+dcZ5IKA"+ihpX.U`@o"+iHqB+U05)N6hd*-#4X_LqOF4,9]LRW<jd$&iYplT;NU@mUsNYhkrI^]4.d/709Xp_.H%CYhTu1K%#9c;1CA@RbcTM8j4TL?.c1@A\qnh2h2@c!_N[u,miL;#A6<GqC"l'-#P&i25P82p#q[:k.R"+HX2Wu!4>sSC_-khk&(]6jaOj''Z%oN>3%D!2*a&1Ef,dg#s#s7sS>?mWMu7,tN\]tmC`b:"u0,*YgN5d0eq.`7C$?`&"Y4T^n(2&#c$;3!H:DQ?>N#JZ`A]21"?,_X'j%JU,_b[J]Z+IK07AVQCsKWt*W&cHK^q/q+5qcWIFXb$kYo[Kro<Epi:$7BUFnDT^$J(VqJ<r`@-(Q3tC[C%!.H"4aGr"BOsuJsV(D%fS$6L_6P?+T9OTAdgd"n3m\4@TK1#\/^^$6bu/5_QZpBT$Ke65-\-up"0g,bT58/,-g"L1-oEHJGbVnOl*Q>Ac_(\cl5WKb2R8pd%YeM$$^r5VC>"d^"%INZ;1S32kUk"%]Rc9cW6/Q!"4MtaS>lkE7IfNp\&a&q6`K'M=Y\3jg:`m1Fnq-T7iAptP1jKAqf>3tZm@<q(%U]f_s";DC2eUC;jZ*O"kBKA5ejGiQ=cY4rpI`AgU"%P@5n#F;_:0uaO@>3n$Q%uRA4@G8u@!:=VT90GK"5C/e2JRij&`hm2db=lU%$p-8NBPms"8CRF\oHp9>murL/EfeB.2U5Bfln51H%0N7MQ/H@RRq@k"[!k,2,T>YmG*N<jk,Q?BB^fXpbuiJ;$;R+[h$1"8i@g##%Bm[\gG'[RO(BJ#ldgi"fUc'AKE`O]cBPVaS`d7$b1JD23.b[eOH3UqfLW4h-U#Qp`Ki,3j8#g%RRU/*iG1]N/KJ/8rC9k''T\o^R%AGH\G,ar&YUc+7@4D;]o1X&/\&&"R)HdIN")-fjB)f:Cc/R4_Ro\DuqYq3S'6;e3pmpD946,41<j:\TO;`+N6>\rQ3`XQL1I8&,k%;7L&/krk1P_Sd2mSHmD:"=n)/8=9\=a=MWPG_2L^cLN3XA$\euibc*,js!&Da[O;5ag(I*rH:*`D'j>I?7*OYlY[Ig5T=:,Gg>(h%Fdo)Z@K<Jue%1:[MC*BkWaYQ/5PEN`[hH[\!`j,^V$<h(WMN".nY-V,"o;^(7"4,O>KZ2oc@,W#!0@QW3g,O@Yi-UKMA%qCklg5Y%;P6I2A@kQI^7r;;RGX.u-6,8f\s?n=T4m5sWZI[!CVl6cn=ba/5iWj)EUU-Y(pr3Pb!'j-WZ@>h/6]7;$iuF-HmB1g9m0KRd,>A*%);GmA)%m`Za(7PN6VHt5DB.2B+?:1shl(OHQ(5IKV]6sB/ml"a+(tf-&WHfj@?@8[6kj)9S;@)tbpFYa.=5F2KVC"<X(iZk:2I%5%>HJ^-r7:b$`7dEH=CYR6;>&j(RP3lD6fGj?;PtXb0ea,_/t'<Ri6(Bk`>8++KBD?]mph*74)Jhm:equF@WkBA'+@ED=e0D$#:Fr'%U!:d??8qtPA\P$k06Z^I;0pK]rsa>LNDapk#,3M1K<p5CaBR1*AP\;gan6BtU*g_lZ%CA0<QOT*#76=.50#`?%t&BNU`4an*$UnK%6C=BS'Q])Q5#u3dU(0YL>==a;!gA?#BD.'<*uNM@OD8VJk&Cs3mj:5I*:Y'!ki/nA4po\jAq:Z(%=@,8=mAAo@$p'%3\uY$8qsI"%&!)AlRm6X;+B'&/\`AJea@2UIC)>A]>\`mcJ<mJ]a;h!6FuIRO!5;?r_/7Lt"i2(Y#&&d_VdbA2NQ&#p`ofXo6ZPdX'SniQWA3_3%<T1ss$+*3N\MPgu6&<TdWpo>g]V)rr7MnWhg)ES4[W9b)#UB3HB=UbHLZ'l:@Hj!LE:J;!Q\-oZ:AQS1XWX8_4!XY9%N'8%#;!@c%V.Vl>!Wk_j"uMo`1$$Ls9HsBfYqG*6WW6bQCdR2Q@`%Ra6(2Pn0@p^m^.\]r*30h!K^BC'fQbo(:r=CKF%u8CO=^.RZf@!2(YdVe%5bOf($E)QB4oh!=?frbe)96#ZFt]*jZepVeFfG?Q/>[AC&I":kQ?B/62+lBj.nDgGpDnD-1aFtZpDnApXbWD:*EsKrhIM]p"XVeH%HWU[u!T!iWs)h!kJt4o5,+7#.c(n]VAe!`eY_G&L]<%ZZkcQKJNME/,iGn!jP_')t_i6*q")do7ALfsnKE0I4-./74Rrf$bhR)hn%M?V6f_^iTqm%i0$nt^"2]!^Fcap,st!9@FAB+'u.S+@0,p[0XBge5k0F5[Q1-l4bmF!D,d)rXEVj$6&W39[-[,oDC%#EO++j"<2N%V"uk#R%e22*>^+o_dC+KZ@cZ;/0$,g$r%L)>ah$&'9>](hN*[g;kY5MY>),SOq34r\VY2BRNT;u7*cY_@)G`o8jgi(GAPG*9]dMC%ihq:!Cs]kngGDq$Jgp>n=d*CZNDUSI60,4_09kUC01)lrUbVU>R\<s'),K99b-Un1"t"LoOQFCK5pJW3cm$]ldS<5$*b/<ffr($3%m.lH;ZaIG%VN&jrDnW+/iF8G1KWoqrY6*XIU:7.D-B'62WcphE6DR=O44c'sp_e\!5ZQt2Cmn!0CeYB0n*m3Nl+1T-P$<Q+J(fH'%LmEsq'8@NT!-ZA,aZ]$AQ:fa"YWU0iM(l=\Y^O#,aQ>aaNf34W<X(CSioZ;=*Q5d.dT+*Z_23W"Y,:j4AcJJ;<JR,=Z63aSfcl)C%:/,U>"&9+PC_/I@YYB*Ld)3\J5gD4@q8/*jEGgO-OT#;5>?&X7F/.!S.YSu3Rt^uO2HFsk_ZjgJ7*LMQBFugjOck8R6VodhGlr%R%#9A`oBTe;(Ki^FNY^1IZ.c?\o2R;!2+%ThKXOrr+%FHa$KS0;`=cesk`b6qcXj*T-I88\@=Sg.^Nd6_EL*I48.=s012Ii\KX^0)>%&N8'&QCBX*R7AcuaU%eQd>$T@bihe+Vi$nr0S%Jc4kn2nR`U;LW0SrVO=\`;1S\EW!+eYr?CsCIF?4XaeGq&!JUSfJ-P39c\?Z6g%U,1Vh/BrioDMi(1.&r5FUlSiYSt8k[hn@)6J,/]AaF>E$s5fGon]P:Yps5T4o;@Y!o-&MZ`BX:qq=Cf)s32&rs%<=fp<2W+IK,e_%s/CMJc_#[]n\>"ZJ,;MVTb"7OJ,0\q=$Ls-f),LBnBEV9<WDa\^]2RU\,Z-sa1qW>&)Vd+:Z)0Fo0<9MmI1&Qo8auBqtk=3pZIUp%IfK?W5CNFXkPnZajl:9/r;?HbX.MWUrni2"5G5)^r:4d?q>5[>LCaD$@CgK'~>%AI9_PrivateDataEnd